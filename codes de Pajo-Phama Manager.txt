tsconcig.json

{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

tailwind.config.ts

import type { Config } from "tailwindcss"

const config = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
	],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      fontFamily: {
        sans: ["var(--font-sans)", "sans-serif"],
        headline: ["var(--font-sans)", "sans-serif"],
      },
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))',
        },
         sidebar: {
          DEFAULT: 'hsl(var(--sidebar-background))',
          foreground: 'hsl(var(--sidebar-foreground))',
          primary: 'hsl(var(--sidebar-primary))',
          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
          accent: 'hsl(var(--sidebar-accent))',
          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
          border: 'hsl(var(--sidebar-border))',
          ring: 'hsl(var(--sidebar-ring))',
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
         'fade-in': {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        'fade-in-up': {
            '0%': {
                opacity: '0',
                transform: 'translateY(10px)'
            },
            '100%': {
                opacity: '1',
                transform: 'translateY(0)'
            },
        }
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
         'fade-in': 'fade-in 0.5s ease-in-out',
        'fade-in-up': 'fade-in-up 0.5s ease-in-out',
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config

export default config

src/lib/utils.ts

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

src/lib/types.ts

export interface PricingTier {
  id: string; // e.g., "price_plaquette"
  unitName: string; // e.g., "Plaquette", "Boîte", "Comprimé"
  price: number;
  itemsPerUnit: number; // e.g., 10 (for a blister pack of 10 tablets)
}

export interface Medicine {
  id: string;
  name: string;
  unit: string; // This remains the display unit, e.g., "Boîte de 20", "Flacon 100ml"
  stock: number;
  purchasePrice: number; // Prix d'achat unitaire (PAU) for the base unit
  expiryDate: string;
  pricing: PricingTier[];
}

export interface Sale {
  id: string;
  items: {
    medicineId: string;
    name: string;
    quantity: number; // How many units were sold (e.g., 2 plaquettes)
    pricePerUnit: number; // The price of the unit sold (e.g., price of one plaquette)
    unitName: string; // The unit that was sold (e.g., "Plaquette")
    itemsPerUnit: number; // How many base items are in the sold unit.
  }[];
  total: number;
  date: string;
}

export interface StockEntry {
  id: string;
  date: string;
  items: {
    medicineId: string;
    name: string;
    quantityAdded: number; // Number of base units added
  }[];
}

export interface CartItem {
  medicineId: string;
  name: string;
  unit: string; // Display unit of medicine
  quantity: number; // How many units are in the cart
  stock: number;
  
  // Pricing details for the selected unit
  pricingId: string;
  price: number; // price for the selected unitName
  unitName: string; // e.g., "Plaquette"
  itemsPerUnit: number; // e.g., 10
}

src/hooks/use-toast.ts

"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }


src/hooks/use-mobile.ts

import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

src/components/ui/toaster.tsx
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

src/components/ui/toast.tsx

"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

src/components/ui/textarea.tsx

import * as React from 'react';

import {cn} from '@/lib/utils';

const Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(
  ({className, ...props}, ref) => {
    return (
      <textarea
        className={cn(
          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Textarea.displayName = 'Textarea';

export {Textarea};

src/components/ui/table.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

src/components/ui/sidebar.tsx

"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar_state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=icon]:w-[--sidebar-width-icon]",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2 mt-auto", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuItem,
  SidebarProvider,
  SidebarTrigger,
  useSidebar,
}

src/components/ui/select.tsx

"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

src/components/ui/scroll-area.tsx

"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

src/components/ui/label.tsx

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

src/components/ui/imput.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

src/components/ui/form.tsx

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

src/components/ui/dalog.tsx

"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

src/components/ui/checkbox.tsx

"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

src/components/ui/chart.tsx

"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

src/components/ui/card.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

src/components/ui/button.tsx

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

src/components/ui/badge.tsx

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

src/components/ui/avatar.tsx

"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

src/components/ui/alert-dialog.tsx

"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

src/components/ui/accordion.tsx

"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

src/components/ui/logo.tsx

import React from 'react';

export function Logo({ className }: { className?: string }) {
  return (
    <svg
      className={className}
      viewBox="0 0 100 100"
      xmlns="http://www.w3.org/2000/svg"
      fill="currentColor"
    >
      <path d="M85,30 H75 V20 A5,5 0 0 0 70,15 H30 A5,5 0 0 0 25,20 V30 H15 A5,5 0 0 0 10,35 V45 H90 V35 A5,5 0 0 0 85,30 Z"></path>
      <path d="M20,50 L30,80 A5,5 0 0 0 35,85 H65 A5,5 0 0 0 70,80 L80,50 H20 Z"></path>
      <path d="M55,2 H45 V18 H30 V28 H45 V42 H55 V28 H70 V18 H55 Z" transform="rotate(10 50 22)"></path>
    </svg>
  );
}

src/components/ui/language-switcher.tsx

"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

src/app/celler/sales/page.tsx

"use client";

import React, { useState, useMemo, useEffect } from "react";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import useStore from "@/hooks/use-store";
import type { CartItem, Sale, Medicine, PricingTier } from "@/lib/types";
import { Plus, Minus, Trash2, Search, Printer, ShoppingCart, FileText, Package } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogTrigger,
  DialogClose
} from "@/components/ui/dialog";
import { useToast } from "@/hooks/use-toast";
import { Logo } from "@/components/logo";
import { format } from "date-fns";
import { fr } from 'date-fns/locale';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";


function InvoiceDialog({ isOpen, onClose, sale }: { isOpen: boolean; onClose: () => void; sale: Sale | null }) {
  const handlePrint = () => window.print();

  if (!sale) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-lg">
        <div className="printable-area">
          <DialogHeader className="mb-4">
            <DialogTitle className="flex items-center gap-2">
              <Logo className="h-8 w-8 text-primary" />
              <span className="text-2xl font-headline">Facture PajoPharma</span>
            </DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div className="flex justify-between text-sm">
              <div>
                <p className="font-bold">ID Facture:</p>
                <p>{sale.id}</p>
              </div>
              <div>
                <p className="font-bold">Date:</p>
                <p>{format(new Date(sale.date), "PPP p", { locale: fr })}</p>
              </div>
            </div>
            <div className="border-t pt-4">
              {sale.items.map((item, index) => (
                <div key={index} className="flex justify-between items-center py-1">
                  <span>{item.name} ({item.unitName}) x {item.quantity}</span>
                  <span>{(item.pricePerUnit * item.quantity).toFixed(0)} CDF</span>
                </div>
              ))}
            </div>
            <div className="border-t pt-2 mt-2 flex justify-end">
              <p className="text-lg font-bold">Total: {sale.total.toFixed(0)} CDF</p>
            </div>
          </div>
        </div>
        <DialogFooter className="mt-6 non-printable">
          <Button variant="outline" onClick={onClose}>Fermer</Button>
          <Button onClick={handlePrint} className="bg-accent hover:bg-accent/90">
            <Printer className="mr-2 h-4 w-4" /> Imprimer la facture
          </Button>
        </DialogFooter>
        <style jsx global>{`
          @media print {
            body * {
              visibility: hidden;
            }
            .printable-area, .printable-area * {
              visibility: visible;
            }
            .printable-area {
              position: absolute;
              left: 0;
              top: 0;
              width: 100%;
            }
            .non-printable {
              display: none;
            }
          }
        `}</style>
      </DialogContent>
    </Dialog>
  );
}

function AddToCartDialog({ medicine, onAddToCart }: { medicine: Medicine, onAddToCart: (pricing: PricingTier, quantity: number) => void }) {
    const [selectedPricingId, setSelectedPricingId] = useState<string | undefined>(medicine.pricing?.[0]?.id);
    const [quantity, setQuantity] = useState(1);
    
    useEffect(() => {
        if (!selectedPricingId && medicine.pricing?.length > 0) {
            setSelectedPricingId(medicine.pricing[0].id);
        }
    }, [medicine, selectedPricingId]);

    const selectedPricing = medicine.pricing.find(p => p.id === selectedPricingId);
    const stockForUnit = selectedPricing ? Math.floor(medicine.stock / selectedPricing.itemsPerUnit) : 0;

    const handleConfirm = () => {
        if (selectedPricing) {
            onAddToCart(selectedPricing, quantity);
        }
    }

    const handleQuantityChange = (newQuantity: number) => {
        if (newQuantity > 0 && newQuantity <= stockForUnit) {
            setQuantity(newQuantity);
        }
    }

    React.useEffect(() => {
        // Reset quantity to 1 when selected pricing changes
        setQuantity(1);
    }, [selectedPricingId]);

     useEffect(() => {
        // if the selected pricing id is not set, set it to the first available one
        if (!selectedPricingId && medicine.pricing && medicine.pricing.length > 0) {
          setSelectedPricingId(medicine.pricing[0].id)
        }
    }, [medicine.pricing, selectedPricingId])


    return (
        <Dialog onOpenChange={() => {
            setQuantity(1);
            if (medicine.pricing?.length > 0) {
                setSelectedPricingId(medicine.pricing[0].id);
            }
        }}>
            <DialogTrigger asChild>
                <Button className="w-full">
                    <Plus className="mr-2 h-4 w-4" /> Ajouter au panier
                </Button>
            </DialogTrigger>
            <DialogContent>
                <DialogHeader>
                    <DialogTitle>Ajouter {medicine.name}</DialogTitle>
                </DialogHeader>
                <div className="space-y-4">
                    <div>
                        <label className="text-sm font-medium">Format de vente</label>
                        <Select onValueChange={setSelectedPricingId} value={selectedPricingId}>
                            <SelectTrigger>
                                <SelectValue placeholder="Choisir un format de vente" />
                            </SelectTrigger>
                            <SelectContent>
                                {medicine.pricing.map(p => {
                                    const availableStock = Math.floor(medicine.stock / p.itemsPerUnit);
                                    const isAvailable = availableStock > 0;
                                    return (
                                        <SelectItem key={`${medicine.id}-${p.id}`} value={p.id!} disabled={!isAvailable}>
                                            {p.unitName} - {p.price.toFixed(0)} CDF ({isAvailable ? `${availableStock} disp.` : 'Stock insuffisant'})
                                        </SelectItem>
                                    );
                                })}
                            </SelectContent>
                        </Select>
                    </div>

                    <div>
                        <label className="text-sm font-medium">Quantité</label>
                        <div className="flex items-center gap-2 mt-1">
                            <Button size="icon" variant="outline" className="h-8 w-8" onClick={() => handleQuantityChange(quantity - 1)} disabled={quantity <= 1}>
                                <Minus className="h-4 w-4" />
                            </Button>
                            <Input
                                type="number"
                                className="w-16 text-center"
                                value={quantity}
                                onChange={(e) => handleQuantityChange(parseInt(e.target.value, 10) || 1)}
                                min="1"
                                max={stockForUnit}
                                disabled={stockForUnit === 0}
                            />
                            <Button size="icon" variant="outline" className="h-8 w-8" onClick={() => handleQuantityChange(quantity + 1)} disabled={quantity >= stockForUnit}>
                                <Plus className="h-4 w-4" />
                            </Button>
                        </div>
                        <p className="text-xs text-muted-foreground mt-1">Stock disponible pour ce format : {stockForUnit}</p>
                    </div>
                </div>
                <DialogFooter>
                    <DialogClose asChild>
                        <Button type="button" variant="secondary">Annuler</Button>
                    </DialogClose>
                     <DialogClose asChild>
                        <Button onClick={handleConfirm} disabled={!selectedPricingId || stockForUnit === 0}>Confirmer</Button>
                    </DialogClose>
                </DialogFooter>
            </DialogContent>
        </Dialog>
    )
}

export default function SalesPage() {
  const { medicines, addSale } = useStore();
  const [cart, setCart] = useState<CartItem[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [lastSale, setLastSale] = useState<Sale | null>(null);
  const [isInvoiceOpen, setInvoiceOpen] = useState(false);
  const { toast } = useToast();

  const filteredMedicines = useMemo(() =>
    medicines.filter((med) =>
      med.name.toLowerCase().includes(searchTerm.toLowerCase()) && med.stock > 0 && med.pricing?.length > 0
    ), [medicines, searchTerm]
  );

  const addToCart = (medicine: Medicine, pricing: PricingTier, quantity: number) => {
    const stockForUnit = Math.floor(medicine.stock / pricing.itemsPerUnit);
    if (stockForUnit <= 0 || quantity > stockForUnit) return;

    const existingItem = cart.find((item) => item.pricingId === pricing.id && item.medicineId === medicine.id);

    if (existingItem) {
        const newQuantity = existingItem.quantity + quantity;
        if (newQuantity <= stockForUnit) {
            setCart(cart.map((item) =>
                (item.pricingId === pricing.id && item.medicineId === medicine.id)
                ? { ...item, quantity: newQuantity }
                : item
            ));
        }
    } else {
      setCart([...cart, { 
          medicineId: medicine.id, 
          name: medicine.name, 
          unit: medicine.unit, 
          quantity: quantity, 
          stock: medicine.stock,
          pricingId: pricing.id!,
          price: pricing.price,
          unitName: pricing.unitName,
          itemsPerUnit: pricing.itemsPerUnit
        }]);
    }
  };

  const updateQuantity = (pricingId: string, newQuantity: number) => {
    const cartItem = cart.find((item) => item.pricingId === pricingId);
    if(!cartItem) return;

    const medicine = medicines.find(m => m.id === cartItem.medicineId);
    if (!medicine) return;

    if (newQuantity <= 0) {
      setCart(cart.filter((item) => item.pricingId !== pricingId));
    } else {
      const stockForUnit = Math.floor(medicine.stock / cartItem.itemsPerUnit);
      if (newQuantity <= stockForUnit) {
        setCart(cart.map((item) =>
            item.pricingId === pricingId ? { ...item, quantity: newQuantity } : item
        ));
      }
    }
  };

  const total = cart.reduce((acc, item) => acc + item.price * item.quantity, 0);

  const handleConfirmSale = () => {
    if (cart.length === 0) return;
    const saleData: Omit<Sale, "id" | "date"> = {
      items: cart.map((item) => ({
        medicineId: item.medicineId,
        name: item.name,
        quantity: item.quantity,
        pricePerUnit: item.price,
        unitName: item.unitName,
        itemsPerUnit: item.itemsPerUnit,
      })),
      total: total,
    };
    
    const newSale = { ...saleData, id: `sale_${Date.now()}`, date: new Date().toISOString() };
    addSale(saleData);
    setLastSale(newSale);
    setInvoiceOpen(true);
    setCart([]);
    toast({
      title: "Vente confirmée !",
      description: `Total : ${total.toFixed(0)} CDF`,
      className: "bg-green-100 text-green-800",
    });
  };

  return (
    <div className="grid md:grid-cols-3 gap-6 h-[calc(100vh-8rem)]">
      <div className="md:col-span-2 flex flex-col gap-4">
        <header>
          <h1 className="text-3xl font-bold font-headline">Terminal de vente</h1>
          <p className="text-muted-foreground">Traitez les ventes des clients efficacement.</p>
        </header>
        <div className="relative">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Rechercher des médicaments..."
            className="pl-10"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
        <Card className="flex-1">
          <CardHeader>
            <CardTitle>Médicaments disponibles</CardTitle>
          </CardHeader>
          <CardContent>
            <ScrollArea className="h-[calc(100vh-22rem)]">
              <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
                {filteredMedicines.map((med) => (
                  <Card key={med.id} className="flex flex-col">
                    <CardHeader className="pb-2">
                      <CardTitle className="text-base">{med.name}</CardTitle>
                    </CardHeader>
                    <CardContent className="flex-1">
                       <p className="text-sm text-muted-foreground">{med.unit}</p>
                       <p className="text-sm font-medium">{med.stock} unités de base en stock</p>
                    </CardContent>
                    <CardFooter>
                      <AddToCartDialog 
                        medicine={med}
                        onAddToCart={(pricing, quantity) => addToCart(med, pricing, quantity)}
                      />
                    </CardFooter>
                  </Card>
                ))}
              </div>
            </ScrollArea>
          </CardContent>
        </Card>
      </div>

      <Card className="flex flex-col">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <ShoppingCart className="h-6 w-6" />
            Vente actuelle
          </CardTitle>
        </CardHeader>
        <CardContent className="flex-1 p-0">
          <ScrollArea className="h-full">
            {cart.length > 0 ? (
              <div className="divide-y p-6 pt-0">
                {cart.map((item) => (
                   <div key={item.pricingId} className="py-3">
                    <div className="flex justify-between">
                      <div>
                        <p className="font-medium">{item.name}</p>
                        <p className="text-sm text-muted-foreground">{item.unitName} - {item.price.toFixed(0)} CDF/unité</p>
                      </div>
                       <p className="font-medium">{(item.price * item.quantity).toFixed(0)} CDF</p>
                    </div>
                    <div className="flex items-center justify-end text-sm mt-1">
                      <div className="flex items-center gap-2">
                        <Button size="icon" variant="outline" className="h-6 w-6" onClick={() => updateQuantity(item.pricingId, item.quantity - 1)}>
                          <Minus className="h-3 w-3" />
                        </Button>
                        <span>{item.quantity}</span>
                        <Button size="icon" variant="outline" className="h-6 w-6" onClick={() => updateQuantity(item.pricingId, item.quantity + 1)}>
                          <Plus className="h-3 w-3" />
                        </Button>
                        <Button size="icon" variant="ghost" className="h-6 w-6 text-red-500" onClick={() => updateQuantity(item.pricingId, 0)}>
                          <Trash2 className="h-3 w-3" />
                        </Button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center h-full text-muted-foreground p-6">
                <FileText className="h-12 w-12 mb-4" />
                <p>Votre panier est vide.</p>
                <p className="text-xs">Ajoutez des articles de la liste pour commencer.</p>
              </div>
            )}
          </ScrollArea>
        </CardContent>
        <CardFooter className="flex-col gap-4 !p-6 border-t">
          <div className="flex justify-between w-full text-lg font-bold">
            <span>Total</span>
            <span>{total.toFixed(0)} CDF</span>
          </div>
          <Button size="lg" className="w-full bg-accent hover:bg-accent/90" onClick={handleConfirmSale} disabled={cart.length === 0}>
            Confirmer la vente
          </Button>
        </CardFooter>
      </Card>
      
      <InvoiceDialog
        isOpen={isInvoiceOpen}
        onClose={() => setInvoiceOpen(false)}
        sale={lastSale}
      />
    </div>
  );
}

src/app/celler/sales/layout.tsx

"use client";

import { useRouter } from "next/navigation";
import Link from "next/link";
import { ShoppingCart, LogOut } from "lucide-react";
import { Logo } from "@/components/logo";
import { Button } from "@/components/ui/button";
import useStore from "@/hooks/use-store";

export default function SellerLayout({ children }: { children: React.ReactNode }) {
  const { setUserRole } = useStore();
  const router = useRouter();

  const handleLogout = () => {
    setUserRole(null);
    router.push('/login');
  }

  return (
      <div className="flex flex-col min-h-screen">
        <header className="sticky top-0 z-30 flex h-16 items-center justify-between gap-4 border-b bg-background px-4 sm:px-6">
            <Link href="/" className="flex items-center gap-2">
              <Logo className="size-8 text-primary" />
              <h1 className="text-xl font-headline font-bold">PajoPharma Vendeur</h1>
            </Link>
            <div className="flex items-center gap-4">
                 <Button variant="ghost" asChild>
                    <Link href="/seller/sales">
                      <ShoppingCart className="mr-2 h-4 w-4" />
                      Ventes
                    </Link>
                  </Button>
                <Button variant="outline" className="bg-primary text-primary-foreground hover:bg-primary/90" onClick={handleLogout}>
                    <LogOut className="mr-2 h-4 w-4" />
                    Déconnexion
                </Button>
            </div>
        </header>
        <main className="flex-1 p-4 sm:p-6 bg-muted/30">
            {children}
        </main>
      </div>
  );
}

src/app/adminin/strategic-analysis/page.tsx

"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { useForm } from "react-hook-form";
import useStore from "@/hooks/use-store";
import { getStrategicAnalysis } from "./actions";
import { Loader2, Sparkles, BrainCircuit, TrendingUp, TrendingDown, Lightbulb } from "lucide-react";

type Inputs = {
  salesData: string;
  inventoryData: string;
};

type Analysis = {
    topPerformingProducts: string;
    underperformingProducts: string;
    strategicRecommendations: string;
};

export default function StrategicAnalysisPage() {
  const { medicines, sales } = useStore();
  const { handleSubmit, setValue } = useForm<Inputs>();
  const [isLoading, setIsLoading] = useState(false);
  const [analysis, setAnalysis] = useState<Analysis | null>(null);
  const [error, setError] = useState<string | null>(null);

  const prefillAndAnalyze = async () => {
    setIsLoading(true);
    setAnalysis(null);
    setError(null);

    const salesSummary = sales.map(s => 
      `Vente du ${new Date(s.date).toLocaleDateString()}: ${s.items.map(i => `${i.quantity}x ${i.unitName} de ${i.name}`).join(', ')} - Total: ${s.total.toFixed(0)} CDF`
    ).join('\n');

    const inventorySummary = medicines.map(m => 
        `Produit: ${m.name}, Stock: ${m.stock} ${m.unit}, Date d'expiration: ${m.expiryDate || 'N/A'}`
    ).join('\n');

    setValue("salesData", salesSummary || "Aucune donnée de vente disponible.");
    setValue("inventoryData", inventorySummary || "Aucune donnée de stock disponible.");
    
    try {
      const result = await getStrategicAnalysis({
          salesData: salesSummary || "Aucune donnée de vente disponible.",
          inventoryData: inventorySummary || "Aucune donnée de stock disponible."
      });
      setAnalysis(result);
    } catch (err) {
      setError("Échec de l'obtention de l'analyse. Veuillez réessayer.");
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col gap-6">
      <header>
        <h1 className="text-3xl font-bold font-headline flex items-center gap-2">
          <BrainCircuit /> Analyse Stratégique par IA
        </h1>
        <p className="text-muted-foreground">
          Obtenez des informations et des recommandations pour optimiser la performance de votre pharmacie.
        </p>
      </header>

       <Card>
        <CardHeader>
          <CardTitle>Lancer une nouvelle analyse</CardTitle>
          <CardDescription>
            Cliquez sur le bouton ci-dessous pour utiliser les données de ventes et d'inventaire les plus récentes afin de générer un rapport stratégique.
          </CardDescription>
        </CardHeader>
        <CardContent>
           <form onSubmit={handleSubmit(prefillAndAnalyze)}>
            <Button type="submit" disabled={isLoading} size="lg">
              {isLoading ? (
                <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Analyse en cours...</>
              ) : (
                <><Sparkles className="mr-2 h-4 w-4" /> Générer une analyse stratégique</>
              )}
            </Button>
          </form>
        </CardContent>
      </Card>
        
      {isLoading && (
         <div className="flex justify-center items-center p-8">
            <Loader2 className="h-8 w-8 animate-spin text-primary" />
            <p className="ml-4 text-muted-foreground">L'IA prépare votre rapport...</p>
        </div>
      )}

      {error && <p className="text-destructive">{error}</p>}

      {analysis && (
        <div className="grid md:grid-cols-1 lg:grid-cols-3 gap-6 animation-fade-in">
           <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2"><TrendingUp className="text-green-500" /> Meilleurs produits</CardTitle>
            </CardHeader>
            <CardContent>
                <p className="text-sm text-muted-foreground whitespace-pre-wrap">{analysis.topPerformingProducts}</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2"><TrendingDown className="text-red-500" /> Produits à surveiller</CardTitle>
            </CardHeader>
            <CardContent>
                 <p className="text-sm text-muted-foreground whitespace-pre-wrap">{analysis.underperformingProducts}</p>
            </CardContent>
          </Card>
           <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2"><Lightbulb className="text-yellow-500" /> Recommandations</CardTitle>
            </CardHeader>
            <CardContent>
                 <p className="text-sm text-muted-foreground whitespace-pre-wrap">{analysis.strategicRecommendations}</p>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}

src/app/adminin/ai-ordering/page.tsx

"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { useForm, SubmitHandler } from "react-hook-form";
import useStore from "@/hooks/use-store";
import { runSuggestOrderAmounts } from "./actions";
import { Loader2, Sparkles, Bot } from "lucide-react";

type Inputs = {
  salesData: string;
  currentStockLevels: string;
  orderingConstraints: string;
};

type Suggestion = {
  suggestedOrders: string;
  rationale: string;
};

export default function AiOrderingPage() {
  const { medicines, sales } = useStore();
  const { register, handleSubmit, setValue } = useForm<Inputs>();
  const [isLoading, setIsLoading] = useState(false);
  const [suggestion, setSuggestion] = useState<Suggestion | null>(null);
  const [error, setError] = useState<string | null>(null);

  const prefillData = () => {
    const salesSummary = sales.slice(0, 20).map(s => 
      `Vente du ${new Date(s.date).toLocaleDateString()}: ${s.items.map(i => `${i.quantity}x ${i.name}`).join(', ')} - Total: ${s.total.toFixed(0)} CDF`
    ).join('\n');

    const stockSummary = medicines.map(m => `${m.name}: ${m.stock} unités`).join('\n');

    setValue("salesData", salesSummary || "Aucune donnée de vente récente disponible.");
    setValue("currentStockLevels", stockSummary || "Aucune donnée de stock disponible.");
    setValue("orderingConstraints", "Limite budgétaire : 10000000 CDF. Capacité de stockage : 2000 unités au total. Délai de livraison du fournisseur : 3-5 jours. Éviter le surstockage d'articles expirant dans les 6 mois.");
  };

  const onSubmit: SubmitHandler<Inputs> = async (data) => {
    setIsLoading(true);
    setSuggestion(null);
    setError(null);
    try {
      const result = await runSuggestOrderAmounts(data);
      setSuggestion(result);
    } catch (err) {
      setError("Échec de l'obtention des suggestions. Veuillez réessayer.");
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col gap-6">
      <header>
        <h1 className="text-3xl font-bold font-headline flex items-center gap-2">
          <Bot /> Commande assistée par IA
        </h1>
        <p className="text-muted-foreground">
          Obtenez des suggestions intelligentes pour votre prochaine commande de fournitures basées sur les tendances de vente.
        </p>
      </header>
      <div className="grid md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Fournir les données</CardTitle>
            <Button variant="outline" size="sm" onClick={prefillData} className="ml-auto -mt-8">
              Pré-remplir avec les données actuelles
            </Button>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
              <div>
                <label className="text-sm font-medium">Données de vente</label>
                <Textarea {...register("salesData")} rows={5} placeholder="ex: Ventes des 30 derniers jours : 50x Paracétamol, 20x Amoxicilline..." />
              </div>
              <div>
                <label className="text-sm font-medium">Niveaux de stock actuels</label>
                <Textarea {...register("currentStockLevels")} rows={5} placeholder="ex: Paracétamol : 150 unités, Amoxicilline : 80 unités..." />
              </div>
              <div>
                <label className="text-sm font-medium">Contraintes de commande</label>
                <Textarea {...register("orderingConstraints")} rows={3} placeholder="ex: Limite budgétaire : 10000000 CDF, capacité de stockage..." />
              </div>
              <Button type="submit" disabled={isLoading} className="w-full">
                {isLoading ? (
                  <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Génération en cours...</>
                ) : (
                  <><Sparkles className="mr-2 h-4 w-4" /> Obtenir des suggestions</>
                )}
              </Button>
            </form>
          </CardContent>
        </Card>
        
        <div className="flex flex-col gap-6">
          <Card className="flex-1">
            <CardHeader>
              <CardTitle>Commandes suggérées</CardTitle>
            </CardHeader>
            <CardContent>
              {isLoading && <p className="text-muted-foreground">Analyse des données...</p>}
              {error && <p className="text-destructive">{error}</p>}
              {suggestion ? (
                <pre className="whitespace-pre-wrap font-sans text-sm">{suggestion.suggestedOrders}</pre>
              ) : !isLoading && <p className="text-muted-foreground">Les suggestions apparaîtront ici.</p>}
            </CardContent>
          </Card>
          <Card className="flex-1">
            <CardHeader>
              <CardTitle>Justification</CardTitle>
            </CardHeader>
            <CardContent>
              {isLoading && <p className="text-muted-foreground">Génération de la justification...</p>}
              {error && <p className="text-destructive">Impossible de générer la justification.</p>}
              {suggestion ? (
                <p className="text-sm text-muted-foreground">{suggestion.rationale}</p>
              ) : !isLoading && <p className="text-muted-foreground">L'explication apparaîtra ici.</p>}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}

src/app/adminin/stock-entry/page.tsx

"use client";

import React, { useState, useMemo } from "react";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
  TableCaption,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import useStore from "@/hooks/use-store";
import type { Medicine, StockEntry } from "@/lib/types";
import { Plus, Minus, Trash2, Search, PackagePlus, FileText, History } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { format } from "date-fns";
import { fr } from 'date-fns/locale';

interface StockCartItem {
  medicineId: string;
  name: string;
  quantity: number;
}

export default function StockEntryPage() {
  const { medicines, stockEntries, addStockEntry } = useStore();
  const [cart, setCart] = useState<StockCartItem[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const { toast } = useToast();

  const filteredMedicines = useMemo(() =>
    medicines.filter((med) =>
      med.name.toLowerCase().includes(searchTerm.toLowerCase())
    ), [medicines, searchTerm]
  );

  const addToCart = (medicine: Medicine) => {
    const existingItem = cart.find((item) => item.medicineId === medicine.id);
    if (existingItem) {
      updateQuantity(medicine.id, existingItem.quantity + 1);
    } else {
      setCart([...cart, { medicineId: medicine.id, name: medicine.name, quantity: 1 }]);
    }
  };

  const updateQuantity = (medicineId: string, newQuantity: number) => {
    if (newQuantity <= 0) {
      setCart(cart.filter((item) => item.medicineId !== medicineId));
    } else {
      setCart(cart.map((item) =>
        item.medicineId === medicineId ? { ...item, quantity: newQuantity } : item
      ));
    }
  };

  const handleConfirmStockEntry = () => {
    if (cart.length === 0) return;
    const entryData: Omit<StockEntry, "id" | "date"> = {
      items: cart.map((item) => ({
        medicineId: item.medicineId,
        name: item.name,
        quantityAdded: item.quantity,
      })),
    };
    
    addStockEntry(entryData);
    setCart([]);
    toast({
      title: "Stock mis à jour !",
      description: `${entryData.items.length} produit(s) ont été ajouté(s) à l'inventaire.`,
      className: "bg-green-100 text-green-800",
    });
  };

  const safeStockEntries = stockEntries || [];

  return (
    <div className="grid md:grid-cols-3 gap-6 h-[calc(100vh-8rem)]">
      {/* Products and Cart Column */}
      <div className="md:col-span-2 flex flex-col gap-4">
        <header>
          <h1 className="text-3xl font-bold font-headline">Alimentation du Stock</h1>
          <p className="text-muted-foreground">Ajoutez de nouveaux arrivages à votre inventaire.</p>
        </header>
        <div className="grid md:grid-cols-2 gap-6 flex-1">
          {/* Products List */}
          <Card className="flex flex-col">
            <CardHeader>
              <CardTitle>Liste des Produits</CardTitle>
              <div className="relative pt-2">
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Rechercher un produit..."
                  className="pl-10"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </div>
            </CardHeader>
            <CardContent className="flex-1 p-0">
              <ScrollArea className="h-[calc(100vh-25rem)]">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Produit</TableHead>
                      <TableHead>Stock Actuel</TableHead>
                      <TableHead className="text-right">Action</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredMedicines.map((med) => (
                      <TableRow key={med.id}>
                        <TableCell className="font-medium">{med.name}</TableCell>
                        <TableCell>{med.stock}</TableCell>
                        <TableCell className="text-right">
                          <Button size="sm" onClick={() => addToCart(med)}>
                            <Plus className="mr-2 h-4 w-4" /> Ajouter
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </ScrollArea>
            </CardContent>
          </Card>

          {/* Current Stock Entry Cart */}
          <Card className="flex flex-col">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <PackagePlus className="h-6 w-6" />
                Nouvelle Entrée de Stock
              </CardTitle>
            </CardHeader>
            <CardContent className="flex-1 p-0">
              <ScrollArea className="h-full">
                {cart.length > 0 ? (
                  <div className="divide-y p-6 pt-0">
                    {cart.map((item) => (
                      <div key={item.medicineId} className="py-3">
                        <p className="font-medium">{item.name}</p>
                        <div className="flex items-center justify-end text-sm mt-1">
                          <div className="flex items-center gap-2">
                            <Button size="icon" variant="outline" className="h-6 w-6" onClick={() => updateQuantity(item.medicineId, item.quantity - 1)}>
                              <Minus className="h-3 w-3" />
                            </Button>
                            <span>{item.quantity}</span>
                            <Button size="icon" variant="outline" className="h-6 w-6" onClick={() => updateQuantity(item.medicineId, item.quantity + 1)}>
                              <Plus className="h-3 w-3" />
                            </Button>
                            <Button size="icon" variant="ghost" className="h-6 w-6 text-red-500" onClick={() => updateQuantity(item.medicineId, 0)}>
                              <Trash2 className="h-3 w-3" />
                            </Button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="flex flex-col items-center justify-center h-full text-muted-foreground p-6">
                    <FileText className="h-12 w-12 mb-4" />
                    <p>Aucun produit ajouté.</p>
                    <p className="text-xs text-center">Sélectionnez des produits dans la liste pour créer une nouvelle entrée de stock.</p>
                  </div>
                )}
              </ScrollArea>
            </CardContent>
            <CardFooter className="flex-col gap-4 !p-6 border-t">
              <Button size="lg" className="w-full bg-accent hover:bg-accent/90" onClick={handleConfirmStockEntry} disabled={cart.length === 0}>
                Confirmer l'Entrée en Stock
              </Button>
            </CardFooter>
          </Card>
        </div>
      </div>

      {/* Stock Entry History Column */}
      <Card className="flex flex-col">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <History className="h-6 w-6" />
            Historique des Entrées
          </CardTitle>
          <CardDescription>Liste des 20 derniers ajouts au stock.</CardDescription>
        </CardHeader>
        <CardContent className="flex-1 p-0">
          <ScrollArea className="h-full">
            <Table>
                <TableCaption>20 dernières entrées en stock.</TableCaption>
                <TableHeader>
                    <TableRow>
                        <TableHead>Date</TableHead>
                        <TableHead>Produits</TableHead>
                        <TableHead>Qté</TableHead>
                    </TableRow>
                </TableHeader>
                <TableBody>
                {safeStockEntries.length > 0 ? (
                  safeStockEntries.slice(0, 20).map((entry) => (
                    <React.Fragment key={entry.id}>
                        <TableRow className="bg-muted/50">
                             <TableCell colSpan={3} className="font-medium text-xs text-muted-foreground py-1">
                                {format(new Date(entry.date), "PPP p", { locale: fr })} (ID: {entry.id.slice(-6)})
                            </TableCell>
                        </TableRow>
                        {entry.items.map((item, index) => (
                            <TableRow key={`${entry.id}-${index}`}>
                                <TableCell className="py-2"></TableCell>
                                <TableCell className="py-2">{item.name}</TableCell>
                                <TableCell className="py-2">{item.quantityAdded}</TableCell>
                            </TableRow>
                        ))}
                    </React.Fragment>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={3} className="h-24 text-center">Aucune entrée de stock pour le moment.</TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </ScrollArea>
        </CardContent>
      </Card>
    </div>
  );
}

src/app/adminin/salle/page.tsx

"use client";

import React, { useState, useMemo, useEffect } from "react";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import useStore from "@/hooks/use-store";
import type { CartItem, Sale, Medicine, PricingTier } from "@/lib/types";
import { Plus, Minus, Trash2, Search, Printer, ShoppingCart, FileText, Package } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogTrigger,
  DialogClose
} from "@/components/ui/dialog";
import { useToast } from "@/hooks/use-toast";
import { Logo } from "@/components/logo";
import { format } from "date-fns";
import { fr } from 'date-fns/locale';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";


function InvoiceDialog({ isOpen, onClose, sale }: { isOpen: boolean; onClose: () => void; sale: Sale | null }) {
  const handlePrint = () => window.print();

  if (!sale) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-lg">
        <div className="printable-area">
          <DialogHeader className="mb-4">
            <DialogTitle className="flex items-center gap-2">
              <Logo className="h-8 w-8 text-primary" />
              <span className="text-2xl font-headline">Facture PajoPharma</span>
            </DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div className="flex justify-between text-sm">
              <div>
                <p className="font-bold">ID Facture:</p>
                <p>{sale.id}</p>
              </div>
              <div>
                <p className="font-bold">Date:</p>
                <p>{format(new Date(sale.date), "PPP p", { locale: fr })}</p>
              </div>
            </div>
            <div className="border-t pt-4">
              {sale.items.map((item, index) => (
                <div key={index} className="flex justify-between items-center py-1">
                  <span>{item.name} ({item.unitName}) x {item.quantity}</span>
                  <span>{(item.pricePerUnit * item.quantity).toFixed(0)} CDF</span>
                </div>
              ))}
            </div>
            <div className="border-t pt-2 mt-2 flex justify-end">
              <p className="text-lg font-bold">Total: {sale.total.toFixed(0)} CDF</p>
            </div>
          </div>
        </div>
        <DialogFooter className="mt-6 non-printable">
          <Button variant="outline" onClick={onClose}>Fermer</Button>
          <Button onClick={handlePrint} className="bg-accent hover:bg-accent/90">
            <Printer className="mr-2 h-4 w-4" /> Imprimer la facture
          </Button>
        </DialogFooter>
        <style jsx global>{`
          @media print {
            body * {
              visibility: hidden;
            }
            .printable-area, .printable-area * {
              visibility: visible;
            }
            .printable-area {
              position: absolute;
              left: 0;
              top: 0;
              width: 100%;
            }
            .non-printable {
              display: none;
            }
          }
        `}</style>
      </DialogContent>
    </Dialog>
  );
}

function AddToCartDialog({ medicine, onAddToCart }: { medicine: Medicine, onAddToCart: (pricing: PricingTier, quantity: number) => void }) {
    const [selectedPricingId, setSelectedPricingId] = useState<string | undefined>(medicine.pricing?.[0]?.id);
    const [quantity, setQuantity] = useState(1);
    
    useEffect(() => {
        if (!selectedPricingId && medicine.pricing?.length > 0) {
            setSelectedPricingId(medicine.pricing[0].id);
        }
    }, [medicine, selectedPricingId]);

    const selectedPricing = medicine.pricing.find(p => p.id === selectedPricingId);
    const stockForUnit = selectedPricing ? Math.floor(medicine.stock / selectedPricing.itemsPerUnit) : 0;

    const handleConfirm = () => {
        if (selectedPricing) {
            onAddToCart(selectedPricing, quantity);
        }
    }

    const handleQuantityChange = (newQuantity: number) => {
        if (newQuantity > 0 && newQuantity <= stockForUnit) {
            setQuantity(newQuantity);
        }
    }

    React.useEffect(() => {
        // Reset quantity to 1 when selected pricing changes
        setQuantity(1);
    }, [selectedPricingId]);

    useEffect(() => {
        // if the selected pricing id is not set, set it to the first available one
        if (!selectedPricingId && medicine.pricing && medicine.pricing.length > 0) {
          setSelectedPricingId(medicine.pricing[0].id)
        }
    }, [medicine.pricing, selectedPricingId])


    return (
        <Dialog onOpenChange={() => {
            setQuantity(1);
            if (medicine.pricing?.length > 0) {
                setSelectedPricingId(medicine.pricing[0].id);
            }
        }}>
            <DialogTrigger asChild>
                <Button className="w-full">
                    <Plus className="mr-2 h-4 w-4" /> Ajouter au panier
                </Button>
            </DialogTrigger>
            <DialogContent>
                <DialogHeader>
                    <DialogTitle>Ajouter {medicine.name}</DialogTitle>
                </DialogHeader>
                <div className="space-y-4">
                    <div>
                        <label className="text-sm font-medium">Format de vente</label>
                        <Select onValueChange={setSelectedPricingId} value={selectedPricingId}>
                            <SelectTrigger>
                                <SelectValue placeholder="Choisir un format de vente" />
                            </SelectTrigger>
                            <SelectContent>
                                {medicine.pricing.map(p => {
                                    const availableStock = Math.floor(medicine.stock / p.itemsPerUnit);
                                    const isAvailable = availableStock > 0;
                                    return (
                                        <SelectItem key={`${medicine.id}-${p.id}`} value={p.id!} disabled={!isAvailable}>
                                            {p.unitName} - {p.price.toFixed(0)} CDF ({isAvailable ? `${availableStock} disp.` : 'Stock insuffisant'})
                                        </SelectItem>
                                    );
                                })}
                            </SelectContent>
                        </Select>
                    </div>

                    <div>
                        <label className="text-sm font-medium">Quantité</label>
                        <div className="flex items-center gap-2 mt-1">
                            <Button size="icon" variant="outline" className="h-8 w-8" onClick={() => handleQuantityChange(quantity - 1)} disabled={quantity <= 1}>
                                <Minus className="h-4 w-4" />
                            </Button>
                            <Input
                                type="number"
                                className="w-16 text-center"
                                value={quantity}
                                onChange={(e) => handleQuantityChange(parseInt(e.target.value, 10) || 1)}
                                min="1"
                                max={stockForUnit}
                                disabled={stockForUnit === 0}
                            />
                            <Button size="icon" variant="outline" className="h-8 w-8" onClick={() => handleQuantityChange(quantity + 1)} disabled={quantity >= stockForUnit}>
                                <Plus className="h-4 w-4" />
                            </Button>
                        </div>
                        <p className="text-xs text-muted-foreground mt-1">Stock disponible pour ce format : {stockForUnit}</p>
                    </div>
                </div>
                <DialogFooter>
                    <DialogClose asChild>
                        <Button type="button" variant="secondary">Annuler</Button>
                    </DialogClose>
                     <DialogClose asChild>
                        <Button onClick={handleConfirm} disabled={!selectedPricingId || stockForUnit === 0}>Confirmer</Button>
                    </DialogClose>
                </DialogFooter>
            </DialogContent>
        </Dialog>
    )
}

export default function SalesPage() {
  const { medicines, addSale } = useStore();
  const [cart, setCart] = useState<CartItem[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [lastSale, setLastSale] = useState<Sale | null>(null);
  const [isInvoiceOpen, setInvoiceOpen] = useState(false);
  const { toast } = useToast();

  const filteredMedicines = useMemo(() =>
    medicines.filter((med) =>
      med.name.toLowerCase().includes(searchTerm.toLowerCase()) && med.stock > 0 && med.pricing?.length > 0
    ), [medicines, searchTerm]
  );

  const addToCart = (medicine: Medicine, pricing: PricingTier, quantity: number) => {
    const stockForUnit = Math.floor(medicine.stock / pricing.itemsPerUnit);
    if (stockForUnit <= 0 || quantity > stockForUnit) return;

    const existingItem = cart.find((item) => item.pricingId === pricing.id && item.medicineId === medicine.id);

    if (existingItem) {
        const newQuantity = existingItem.quantity + quantity;
        if (newQuantity <= stockForUnit) {
            setCart(cart.map((item) =>
                (item.pricingId === pricing.id && item.medicineId === medicine.id)
                ? { ...item, quantity: newQuantity }
                : item
            ));
        }
    } else {
      setCart([...cart, { 
          medicineId: medicine.id, 
          name: medicine.name, 
          unit: medicine.unit, 
          quantity: quantity, 
          stock: medicine.stock,
          pricingId: pricing.id!,
          price: pricing.price,
          unitName: pricing.unitName,
          itemsPerUnit: pricing.itemsPerUnit
        }]);
    }
  };

  const updateQuantity = (pricingId: string, newQuantity: number) => {
    const cartItem = cart.find((item) => item.pricingId === pricingId);
    if(!cartItem) return;

    const medicine = medicines.find(m => m.id === cartItem.medicineId);
    if (!medicine) return;

    if (newQuantity <= 0) {
      setCart(cart.filter((item) => item.pricingId !== pricingId));
    } else {
      const stockForUnit = Math.floor(medicine.stock / cartItem.itemsPerUnit);
      if (newQuantity <= stockForUnit) {
        setCart(cart.map((item) =>
            item.pricingId === pricingId ? { ...item, quantity: newQuantity } : item
        ));
      }
    }
  };

  const total = cart.reduce((acc, item) => acc + item.price * item.quantity, 0);

  const handleConfirmSale = () => {
    if (cart.length === 0) return;
    const saleData: Omit<Sale, "id" | "date"> = {
      items: cart.map((item) => ({
        medicineId: item.medicineId,
        name: item.name,
        quantity: item.quantity,
        pricePerUnit: item.price,
        unitName: item.unitName,
        itemsPerUnit: item.itemsPerUnit,
      })),
      total: total,
    };
    
    const newSale = { ...saleData, id: `sale_${Date.now()}`, date: new Date().toISOString() };
    addSale(saleData);
    setLastSale(newSale);
    setInvoiceOpen(true);
    setCart([]);
    toast({
      title: "Vente confirmée !",
      description: `Total : ${total.toFixed(0)} CDF`,
      className: "bg-green-100 text-green-800",
    });
  };

  return (
    <div className="grid md:grid-cols-3 gap-6 h-[calc(100vh-8rem)]">
      <div className="md:col-span-2 flex flex-col gap-4">
        <header>
          <h1 className="text-3xl font-bold font-headline">Terminal de vente</h1>
          <p className="text-muted-foreground">Traitez les ventes des clients efficacement.</p>
        </header>
        <div className="relative">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Rechercher des médicaments..."
            className="pl-10"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
        <Card className="flex-1">
          <CardHeader>
            <CardTitle>Médicaments disponibles</CardTitle>
          </CardHeader>
          <CardContent>
            <ScrollArea className="h-[calc(100vh-22rem)]">
              <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
                {filteredMedicines.map((med) => (
                  <Card key={med.id} className="flex flex-col">
                    <CardHeader className="pb-2">
                      <CardTitle className="text-base">{med.name}</CardTitle>
                    </CardHeader>
                    <CardContent className="flex-1">
                       <p className="text-sm text-muted-foreground">{med.unit}</p>
                       <p className="text-sm font-medium">{med.stock} unités de base en stock</p>
                    </CardContent>
                    <CardFooter>
                      <AddToCartDialog 
                        medicine={med}
                        onAddToCart={(pricing, quantity) => addToCart(med, pricing, quantity)}
                      />
                    </CardFooter>
                  </Card>
                ))}
              </div>
            </ScrollArea>
          </CardContent>
        </Card>
      </div>

      <Card className="flex flex-col">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <ShoppingCart className="h-6 w-6" />
            Vente actuelle
          </CardTitle>
        </CardHeader>
        <CardContent className="flex-1 p-0">
          <ScrollArea className="h-full">
            {cart.length > 0 ? (
              <div className="divide-y p-6 pt-0">
                {cart.map((item) => (
                   <div key={item.pricingId} className="py-3">
                    <div className="flex justify-between">
                      <div>
                        <p className="font-medium">{item.name}</p>
                        <p className="text-sm text-muted-foreground">{item.unitName} - {item.price.toFixed(0)} CDF/unité</p>
                      </div>
                       <p className="font-medium">{(item.price * item.quantity).toFixed(0)} CDF</p>
                    </div>
                    <div className="flex items-center justify-end text-sm mt-1">
                      <div className="flex items-center gap-2">
                        <Button size="icon" variant="outline" className="h-6 w-6" onClick={() => updateQuantity(item.pricingId, item.quantity - 1)}>
                          <Minus className="h-3 w-3" />
                        </Button>
                        <span>{item.quantity}</span>
                        <Button size="icon" variant="outline" className="h-6 w-6" onClick={() => updateQuantity(item.pricingId, item.quantity + 1)}>
                          <Plus className="h-3 w-3" />
                        </Button>
                        <Button size="icon" variant="ghost" className="h-6 w-6 text-red-500" onClick={() => updateQuantity(item.pricingId, 0)}>
                          <Trash2 className="h-3 w-3" />
                        </Button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center h-full text-muted-foreground p-6">
                <FileText className="h-12 w-12 mb-4" />
                <p>Votre panier est vide.</p>
                <p className="text-xs">Ajoutez des articles de la liste pour commencer.</p>
              </div>
            )}
          </ScrollArea>
        </CardContent>
        <CardFooter className="flex-col gap-4 !p-6 border-t">
          <div className="flex justify-between w-full text-lg font-bold">
            <span>Total</span>
            <span>{total.toFixed(0)} CDF</span>
          </div>
          <Button size="lg" className="w-full bg-accent hover:bg-accent/90" onClick={handleConfirmSale} disabled={cart.length === 0}>
            Confirmer la vente
          </Button>
        </CardFooter>
      </Card>
      
      <InvoiceDialog
        isOpen={isInvoiceOpen}
        onClose={() => setInvoiceOpen(false)}
        sale={lastSale}
      />
    </div>
  );
}

src/app/adminin/layout.tsx

"use client";

import { usePathname, useRouter } from "next/navigation";
import Link from "next/link";
import { Bot, LayoutDashboard, ShoppingCart, Warehouse, PanelLeft, LogOut, CheckSquare, List, BrainCircuit, PlusCircle } from "lucide-react";
import {
  SidebarProvider,
  Sidebar,
  SidebarHeader,
  SidebarContent,
  SidebarMenu,
  SidebarMenuItem,
  SidebarFooter,
  SidebarTrigger,
} from "@/components/ui/sidebar";
import { Logo } from "@/components/logo";
import { Button } from "@/components/ui/button";
import { LanguageSwitcher } from "@/components/language-switcher";
import useStore from "@/hooks/use-store";

const navItems = [
  { href: "/admin/dashboard", icon: LayoutDashboard, label: "Tableau de bord" },
  { href: "/admin/inventory-config", icon: CheckSquare, label: "Configurer le stock" },
  { href: "/admin/stock-entry", icon: PlusCircle, label: "Alimentation du Stock"},
  { href: "/admin/inventory", icon: Warehouse, label: "Gérer le stock & Prix" },
  { href: "/admin/inventory-detail", icon: List, label: "Inventaire" },
  { href: "/admin/sales", icon: ShoppingCart, label: "Ventes" },
  { href: "/admin/ai-ordering", icon: Bot, label: "Commande IA" },
  { href: "/admin/strategic-analysis", icon: BrainCircuit, label: "Analyse Stratégique IA" },
];

export default function AdminLayout({ children }: { children: React.ReactNode }) {
  const pathname = usePathname();
  const { setUserRole } = useStore();
  const router = useRouter();

  const handleLogout = () => {
    setUserRole(null);
    router.push('/login');
  }

  return (
    <SidebarProvider>
      <div className="flex min-h-screen">
        <Sidebar>
          <SidebarHeader>
            <Link href="/" className="flex items-center gap-2">
              <Logo className="size-8 text-sidebar-primary-foreground" />
              <h1 className="text-xl font-headline font-bold">PajoPharma</h1>
            </Link>
          </SidebarHeader>
          <SidebarContent>
            <SidebarMenu>
              {navItems.map((item) => (
                <SidebarMenuItem key={item.href}>
                  <Button
                    variant={pathname === item.href ? "secondary" : "ghost"}
                    className="w-full justify-start text-lg h-14"
                    asChild
                  >
                    <Link href={item.href}>
                      <item.icon className="mr-4 h-6 w-6" />
                      {item.label}
                    </Link>
                  </Button>
                </SidebarMenuItem>
              ))}
            </SidebarMenu>
          </SidebarContent>
          <SidebarFooter>
            <LanguageSwitcher />
            <Button variant="outline" className="bg-sidebar-primary text-sidebar-primary-foreground hover:bg-sidebar-primary/90" onClick={handleLogout}>
              <LogOut className="mr-2 h-4 w-4" />
              Déconnexion
            </Button>
          </SidebarFooter>
        </Sidebar>
        <div className="flex flex-col flex-1 h-screen">
            <header className="sticky top-0 z-30 flex h-14 items-center gap-4 border-b bg-background px-4 sm:static sm:h-auto sm:border-0 sm:bg-transparent sm:px-6 md:hidden">
                <SidebarTrigger>
                    <Button size="icon" variant="outline">
                        <PanelLeft className="h-5 w-5" />
                        <span className="sr-only">Ouvrir/Fermer le menu</span>
                    </Button>
                </SidebarTrigger>
                 <Link href="/" className="flex items-center gap-2">
                    <Logo className="size-7" />
                    <h1 className="text-lg font-headline font-bold">PajoPharma</h1>
                </Link>
            </header>
            <main className="flex-1 overflow-auto p-4 sm:p-6 bg-muted/30">
                {children}
            </main>
        </div>
      </div>
    </SidebarProvider>
  );
}

src/app/adminin/inventory/page.tsx

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
  TableCaption,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogDescription,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"
import { Input } from "@/components/ui/input";
import useStore from "@/hooks/use-store";
import type { Medicine, PricingTier } from "@/lib/types";
import { Edit, Plus, Trash2, AlertTriangle } from "lucide-react";
import { useForm, useFieldArray } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { useToast } from "@/hooks/use-toast";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";


const pricingTierSchema = z.object({
    id: z.string().optional(),
    unitName: z.string().min(1, "Le nom de l'unité est requis"),
    price: z.coerce.number().min(0, "Le prix ne peut pas être négatif"),
    itemsPerUnit: z.coerce.number().int().min(1, "Doit contenir au moins 1 article"),
});

const medicineUpdateSchema = z.object({
  stock: z.coerce.number().int().min(0, "Le stock ne peut pas être négatif"),
  purchasePrice: z.coerce.number().min(0, "Le prix d'achat ne peut être négatif").optional(),
  expiryDate: z.string().optional(),
  pricing: z.array(pricingTierSchema).min(1, "Au moins un niveau de prix est requis"),
});

const newMedicineSchema = z.object({
    name: z.string().min(3, "Le nom est requis (3 caractères min)."),
    unit: z.string().min(1, "L'unité de base est requise."),
    stock: z.coerce.number().int().min(0, "Le stock ne peut pas être négatif").default(0),
    purchasePrice: z.coerce.number().min(0, "Le prix d'achat ne peut être négatif").default(0),
    expiryDate: z.string().optional(),
    pricing: z.array(pricingTierSchema).min(1, "Au moins un niveau de prix est requis."),
})

function AddMedicineDialog() {
    const [isOpen, setIsOpen] = useState(false);
    const { addMedicine } = useStore();
    const { toast } = useToast();

    const form = useForm<z.infer<typeof newMedicineSchema>>({
        resolver: zodResolver(newMedicineSchema),
        defaultValues: {
            name: "",
            unit: "",
            stock: 0,
            purchasePrice: 0,
            expiryDate: "",
            pricing: [{ unitName: "Unité", price: 100, itemsPerUnit: 1 }],
        },
    });

     const { fields, append, remove } = useFieldArray({
        control: form.control,
        name: "pricing",
    });

    const onSubmit = (values: z.infer<typeof newMedicineSchema>) => {
        addMedicine(values);
        toast({
            title: "Produit ajouté",
            description: `${values.name} a été ajouté à votre inventaire.`,
            className: "bg-green-100 text-green-800",
        });
        form.reset();
        setIsOpen(false);
    }
    
    return (
        <Dialog open={isOpen} onOpenChange={setIsOpen}>
            <DialogTrigger asChild>
                <Button>
                    <Plus className="mr-2 h-4 w-4" />
                    Ajouter un nouveau produit
                </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-3xl">
                <DialogHeader>
                    <DialogTitle>Ajouter un nouveau produit à l'inventaire</DialogTitle>
                    <DialogDescription>
                        Remplissez les informations de base pour ce nouveau produit. Vous pourrez les modifier plus tard.
                    </DialogDescription>
                </DialogHeader>
                 <Form {...form}>
                    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                        <div className="grid grid-cols-2 gap-4">
                           <FormField control={form.control} name="name" render={({ field }) => (
                                <FormItem><FormLabel>Nom du produit</FormLabel><FormControl><Input placeholder="ex: Paracétamol 500 mg" {...field} autoComplete="off" /></FormControl><FormMessage /></FormItem>
                            )}/>
                             <FormField control={form.control} name="unit" render={({ field }) => (
                                <FormItem><FormLabel>Conditionnement de base</FormLabel>
                                <Select onValueChange={field.onChange} defaultValue={field.value}>
                                    <FormControl>
                                        <SelectTrigger>
                                            <SelectValue placeholder="Sélectionner un conditionnement" />
                                        </SelectTrigger>
                                    </FormControl>
                                    <SelectContent>
                                        <SelectItem value="Comprimé">Comprimé</SelectItem>
                                        <SelectItem value="Gélule">Gélule</SelectItem>
                                        <SelectItem value="Sachet">Sachet</SelectItem>
                                        <SelectItem value="Flacon">Flacon</SelectItem>
                                        <SelectItem value="Tube">Tube</SelectItem>
                                        <SelectItem value="Pommade">Pommade</SelectItem>
                                        <SelectItem value="Injectable">Injectable</SelectItem>
                                        <SelectItem value="Autre">Autre</SelectItem>
                                    </SelectContent>
                                </Select>
                                <FormMessage />
                                </FormItem>
                            )}/>
                            <FormField control={form.control} name="stock" render={({ field }) => (
                                <FormItem><FormLabel>Quantité en stock (unités de base)</FormLabel><FormControl><Input type="number" {...field} /></FormControl><FormMessage /></FormItem>
                            )}/>
                             <FormField control={form.control} name="purchasePrice" render={({ field }) => (
                                <FormItem><FormLabel>Prix d'Achat Unitaire (CDF)</FormLabel><FormControl><Input type="number" {...field} /></FormControl><FormMessage /></FormItem>
                            )}/>
                            <FormField control={form.control} name="expiryDate" render={({ field }) => (
                                <FormItem><FormLabel>Date d'expiration</FormLabel><FormControl><Input type="date" {...field} /></FormControl><FormMessage /></FormItem>
                            )}/>
                        </div>

                         <div>
                            <h3 className="text-lg font-medium mb-2">Formats de vente</h3>
                            <div className="space-y-4">
                                {fields.map((field, index) => (
                                    <div key={field.id} className="grid grid-cols-4 gap-2 items-center p-2 border rounded-md">
                                        <FormField control={form.control} name={`pricing.${index}.unitName`} render={({ field }) => (
                                            <FormItem><FormLabel>Nom Format</FormLabel><FormControl><Input placeholder="ex: Plaquette" {...field} /></FormControl><FormMessage /></FormItem>
                                        )}/>
                                         <FormField control={form.control} name={`pricing.${index}.itemsPerUnit`} render={({ field }) => (
                                            <FormItem><FormLabel>Articles/Format</FormLabel><FormControl><Input type="number" placeholder="ex: 10" {...field} /></FormControl><FormMessage /></FormItem>
                                        )}/>
                                        <FormField control={form.control} name={`pricing.${index}.price`} render={({ field }) => (
                                            <FormItem><FormLabel>Prix de Vente (CDF)</FormLabel><FormControl><Input type="number" step="1" {...field} /></FormControl><FormMessage /></FormItem>
                                        )}/>
                                        <Button type="button" variant="destructive" size="icon" onClick={() => remove(index)}>
                                            <Trash2 className="h-4 w-4"/>
                                        </Button>
                                    </div>
                                ))}
                            </div>
                           
                        </div>
                        <div className="flex justify-between items-center mt-4">
                            <Button
                                type="button"
                                variant="outline"
                                size="sm"
                                onClick={() => append({ unitName: '', price: 0, itemsPerUnit: 1 })}
                                >
                                <Plus className="mr-2 h-4 w-4" />
                                Ajouter un format de vente
                            </Button>
                             <div className="flex gap-2">
                                <Button type="button" variant="ghost" onClick={() => setIsOpen(false)}>Annuler</Button>
                                <Button type="submit" className="bg-accent hover:bg-accent/90">Créer le produit</Button>
                            </div>
                        </div>
                    </form>
                 </Form>
            </DialogContent>
        </Dialog>
    )
}

function DeleteMedicineDialog({ medicine, onConfirm }: { medicine: Medicine, onConfirm: () => void }) {
    return (
        <AlertDialog>
            <AlertDialogTrigger asChild>
                <Button variant="ghost" size="icon" className="text-destructive hover:text-destructive">
                    <Trash2 className="h-4 w-4" />
                </Button>
            </AlertDialogTrigger>
            <AlertDialogContent>
                <AlertDialogHeader>
                <AlertDialogTitle>Êtes-vous absolument sûr?</AlertDialogTitle>
                <AlertDialogDescription>
                    Cette action ne peut pas être annulée. Cela supprimera définitivement le produit "{medicine.name}" de votre inventaire.
                </AlertDialogDescription>
                </AlertDialogHeader>
                <AlertDialogFooter>
                <AlertDialogCancel>Annuler</AlertDialogCancel>
                <AlertDialogAction onClick={onConfirm} className="bg-destructive hover:bg-destructive/90">
                    Supprimer
                </AlertDialogAction>
                </AlertDialogFooter>
            </AlertDialogContent>
        </AlertDialog>
    );
}

export default function InventoryPage() {
  const { medicines, updateMedicineDetails, deleteMedicine } = useStore();
  const [isUpdateDialogOpen, setUpdateDialogOpen] = useState(false);
  const [selectedMedicine, setSelectedMedicine] = useState<Medicine | null>(null);
  const { toast } = useToast();
  
  const form = useForm<z.infer<typeof medicineUpdateSchema>>({
    resolver: zodResolver(medicineUpdateSchema),
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "pricing",
  });

  const handleUpdateSubmit = (values: z.infer<typeof medicineUpdateSchema>) => {
    if (selectedMedicine) {
      updateMedicineDetails(selectedMedicine.id, values);
      toast({
        title: "Succès",
        description: `Les détails pour ${selectedMedicine.name} ont été mis à jour.`,
        className: "bg-green-100 text-green-800",
      });
      setUpdateDialogOpen(false);
    }
  };

  const handleDelete = (medicineId: string) => {
    deleteMedicine(medicineId);
    toast({
        title: "Produit Supprimé",
        description: "Le produit a été retiré de l'inventaire.",
        variant: "destructive"
    });
  }

  const openUpdateDialog = (medicine: Medicine) => {
    setSelectedMedicine(medicine);
    form.reset({ 
        stock: medicine.stock,
        purchasePrice: medicine.purchasePrice,
        expiryDate: medicine.expiryDate,
        pricing: medicine.pricing?.length > 0 ? medicine.pricing : [{ unitName: "Unité", price: 0, itemsPerUnit: 1 }],
    });
    setUpdateDialogOpen(true);
  };
  
  const sortedMedicines = React.useMemo(() => {
    return [...medicines].sort((a, b) => a.name.localeCompare(b.name));
  }, [medicines]);

  return (
    <div className="flex flex-col gap-6">
      <header className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold font-headline">Gérer le stock et les prix</h1>
          <p className="text-muted-foreground">
            Mettez à jour les quantités, dates d'expiration et les différents formats de vente de vos produits.
          </p>
        </div>
        <AddMedicineDialog />
      </header>
      <div className="border rounded-lg w-full">
        <Table>
            <TableCaption>Liste de vos médicaments en stock.</TableCaption>
            <TableHeader>
                <TableRow>
                    <TableHead>Nom</TableHead>
                    <TableHead>Conditionnement</TableHead>
                    <TableHead>Stock de base</TableHead>
                    <TableHead>PAU (CDF)</TableHead>
                    <TableHead>PAT (CDF)</TableHead>
                    <TableHead>PVU (CDF)</TableHead>
                    <TableHead>PV Total (CDF)</TableHead>
                    <TableHead>Bénéfice (CDF)</TableHead>
                    <TableHead>Date d'expiration</TableHead>
                    <TableHead className="text-right">Action</TableHead>
                </TableRow>
            </TableHeader>
            <TableBody>
                {sortedMedicines.map((med) => {
                    const purchasePrice = med.purchasePrice || 0;
                    const pat = med.stock * purchasePrice;
                    const basePricing = med.pricing.find(p => p.itemsPerUnit === 1);
                    const pvu = basePricing?.price || 0;
                    const pvt = med.stock * pvu;
                    const benefit = pvt - pat;

                    return (
                        <TableRow key={med.id}>
                            <TableCell className="font-medium">{med.name}</TableCell>
                            <TableCell>{med.unit}</TableCell>
                            <TableCell>{med.stock}</TableCell>
                            <TableCell>{purchasePrice.toFixed(0)}</TableCell>
                            <TableCell>{pat.toFixed(0)}</TableCell>
                             <TableCell>
                                {(!basePricing) ? (
                                    <Badge variant="destructive" className="flex items-center gap-1.5">
                                        <AlertTriangle className="h-3 w-3" />
                                        N/A
                                    </Badge>
                                ) : (
                                    pvu.toFixed(0)
                                )}
                            </TableCell>
                            <TableCell>{pvt.toFixed(0)}</TableCell>
                            <TableCell className={benefit > 0 ? 'text-green-600' : 'text-red-600'}>
                                {benefit.toFixed(0)}
                            </TableCell>
                            <TableCell>{med.expiryDate}</TableCell>
                            <TableCell className="text-right space-x-2">
                                <Button variant="ghost" size="icon" onClick={() => openUpdateDialog(med)}>
                                    <Edit className="h-4 w-4" />
                                </Button>
                                <DeleteMedicineDialog medicine={med} onConfirm={() => handleDelete(med.id)} />
                            </TableCell>
                        </TableRow>
                    );
                })}
            </TableBody>
        </Table>
      </div>

      {selectedMedicine && (
        <Dialog open={isUpdateDialogOpen} onOpenChange={setUpdateDialogOpen}>
          <DialogContent className="sm:max-w-3xl">
            <DialogHeader>
              <DialogTitle>Mettre à jour: {selectedMedicine.name}</DialogTitle>
              <DialogDescription>
                Ajustez le stock, la date d'expiration et les prix de vente pour ce produit.
              </DialogDescription>
            </DialogHeader>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(handleUpdateSubmit)} className="space-y-6">
                <div className="grid grid-cols-2 gap-4">
                    <FormField control={form.control} name="stock" render={({ field }) => (
                        <FormItem><FormLabel>Quantité en stock (unités de base)</FormLabel><FormControl><Input type="number" {...field} /></FormControl><FormMessage /></FormItem>
                    )}
                    />
                    <FormField control={form.control} name="purchasePrice" render={({ field }) => (
                        <FormItem><FormLabel>Prix d'Achat Unitaire (CDF)</FormLabel><FormControl><Input type="number" {...field} /></FormControl><FormMessage /></FormItem>
                    )}/>
                    <FormField control={form.control} name="expiryDate" render={({ field }) => (
                        <FormItem><FormLabel>Date d'expiration</FormLabel><FormControl><Input type="date" {...field} /></FormControl><FormMessage /></FormItem>
                    )}
                    />
                </div>

                <div>
                    <h3 className="text-lg font-medium mb-2">Formats de vente</h3>
                    <div className="space-y-4">
                        {fields.map((field, index) => (
                            <div key={field.id} className="grid grid-cols-4 gap-2 items-center p-2 border rounded-md">
                                <FormField control={form.control} name={`pricing.${index}.unitName`} render={({ field }) => (
                                    <FormItem><FormLabel>Nom Format</FormLabel><FormControl><Input placeholder="ex: Plaquette" {...field} /></FormControl><FormMessage /></FormItem>
                                )}/>
                                 <FormField control={form.control} name={`pricing.${index}.itemsPerUnit`} render={({ field }) => (
                                    <FormItem><FormLabel>Articles/Format</FormLabel><FormControl><Input type="number" placeholder="ex: 10" {...field} /></FormControl><FormMessage /></FormItem>
                                )}/>
                                <FormField control={form.control} name={`pricing.${index}.price`} render={({ field }) => (
                                    <FormItem><FormLabel>Prix de Vente (CDF)</FormLabel><FormControl><Input type="number" step="1" {...field} /></FormControl><FormMessage /></FormItem>
                                )}/>
                                <Button type="button" variant="destructive" size="icon" onClick={() => remove(index)}>
                                    <Trash2 className="h-4 w-4"/>
                                </Button>
                            </div>
                        ))}
                    </div>
                    <div className="flex justify-between items-center mt-4">
                        <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={() => append({ unitName: '', price: 0, itemsPerUnit: 1 })}
                            >
                            <Plus className="mr-2 h-4 w-4" />
                            Ajouter un format de vente
                        </Button>
                         <div className="flex gap-2">
                            <Button type="button" variant="ghost" onClick={() => setUpdateDialogOpen(false)}>Annuler</Button>
                            <Button type="submit" className="bg-accent hover:bg-accent/90">Mettre à jour le produit</Button>
                        </div>
                    </div>
                </div>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
}

src/app/adminin/inventory-detail/page.tsx

"use client";

import React from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
  TableCaption,
} from "@/components/ui/table";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import useStore from "@/hooks/use-store";
import { Badge } from "@/components/ui/badge";

export default function InventoryDetailPage() {
  const { medicines, sales } = useStore();

  const getStockBadgeVariant = (stock: number) => {
    if (stock === 0) return "destructive";
    if (stock <= 10) return "secondary";
    return "default";
  };

  const inventoryDetails = React.useMemo(() => {
    const detailsMap = new Map(medicines.map(med => [med.id, {
        ...med,
        sold: 0,
    }]));

    sales.forEach(sale => {
      sale.items.forEach(item => {
        const detail = detailsMap.get(item.medicineId);
        if (detail) {
           // This logic was slightly off, it should use itemsPerUnit from the sale item
           detail.sold += item.quantity * (item.itemsPerUnit || 1);
        }
      });
    });

    return Array.from(detailsMap.values()).map(detail => ({
        ...detail,
        cumulativeStock: detail.stock + detail.sold,
    }));
  }, [sales, medicines]);

  return (
    <div className="flex flex-col gap-6">
      <header>
        <h1 className="text-3xl font-bold font-headline">Inventaire Détaillé</h1>
        <p className="text-muted-foreground">
          Consultez la liste complète de tous les produits, les quantités vendues et le stock restant.
        </p>
      </header>
      <Card>
        <CardHeader>
          <CardTitle>Liste des Produits</CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableCaption>
              Liste complète de tous les médicaments enregistrés dans votre système.
            </TableCaption>
            <TableHeader>
              <TableRow>
                <TableHead>Nom du produit</TableHead>
                <TableHead>Stock Cumulé</TableHead>
                <TableHead>Quantité Vendue</TableHead>
                <TableHead>Stock Restant</TableHead>
                <TableHead>Date d'expiration</TableHead>
                <TableHead className="text-right">Statut</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {inventoryDetails.map((med) => (
                <TableRow key={med.id}>
                  <TableCell className="font-medium">{med.name}</TableCell>
                  <TableCell>{med.cumulativeStock}</TableCell>
                  <TableCell>{med.sold}</TableCell>
                  <TableCell>{med.stock}</TableCell>
                  <TableCell>{med.expiryDate || "N/A"}</TableCell>
                  <TableCell className="text-right">
                    <Badge variant={getStockBadgeVariant(med.stock)}>
                      {med.stock === 0 ? "En Rupture" : med.stock <= 10 ? "Stock Faible" : "En Stock"}
                    </Badge>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}

src/app/adminin/inventory-config/page.tsx

"use client";

import React, { useCallback } from "react";
import useStore from "@/hooks/use-store";
import type { Medicine } from "@/lib/types";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";
import { useToast } from "@/hooks/use-toast";
import { allMedicinesList } from "./page-data";
import { Loader2 } from "lucide-react";

export default function ConfigureInventoryPage() {
  const { selectedConfig, setSelectedConfig, isHydrated } = useStore();
  const { toast } = useToast();

  const handleToggle = useCallback((medicineName: string) => {
    const newSelection = new Set(selectedConfig);
    if (newSelection.has(medicineName)) {
      newSelection.delete(medicineName);
    } else {
      newSelection.add(medicineName);
    }
    setSelectedConfig(newSelection);
    toast({
        title: "Configuration mise à jour",
        description: `${newSelection.size} produits sont maintenant gérés.`,
        className: "bg-green-100 text-green-800",
    });
  }, [selectedConfig, setSelectedConfig, toast]);

  const handleToggleCategory = useCallback((categoryMedicines: Omit<Medicine, "id" | "stock" | "expiryDate">[], shouldSelect: boolean) => {
    const categoryMedicineNames = categoryMedicines.map(m => m.name);
    const newSelection = new Set(selectedConfig);
    if (shouldSelect) {
        categoryMedicineNames.forEach(name => newSelection.add(name));
    } else {
        categoryMedicineNames.forEach(name => newSelection.delete(name));
    }
    setSelectedConfig(newSelection);
     toast({
        title: "Configuration mise à jour",
        description: `${newSelection.size} produits sont maintenant gérés.`,
        className: "bg-green-100 text-green-800",
    });
  }, [selectedConfig, setSelectedConfig, toast]);


  const medicineCategories = allMedicinesList.reduce((acc, med) => {
      const categoryTitleMatch = medicineCategoriesConfig.find(cat => cat.medicines.some(m => m.name === med.name));
      const title = categoryTitleMatch ? categoryTitleMatch.title : "Divers";

      if (!acc[title]) {
          acc[title] = [];
      }
      acc[title].push(med);
      return acc;
  }, {} as Record<string, typeof allMedicinesList>);

  if (!isHydrated) {
    return (
      <div className="flex flex-col gap-6 h-full items-center justify-center">
         <Loader2 className="h-12 w-12 animate-spin text-primary" />
        <h1 className="text-xl font-bold font-headline">Chargement de la configuration...</h1>
      </div>
    );
  }

  return (
    <div className="flex flex-col gap-6 h-full">
      <header>
        <h1 className="text-3xl font-bold font-headline">Configuration du stock ({selectedConfig.size})</h1>
        <p className="text-muted-foreground">
          Cochez les produits à gérer. La sauvegarde est automatique.
        </p>
      </header>
      
      <div className="space-y-6 flex-1 overflow-auto pb-8">
        {Object.entries(medicineCategories).map(([title, categoryMedicines]) => {
            const categoryMedicineNames = categoryMedicines.map(m => m.name);
            const allSelected = categoryMedicineNames.every(name => selectedConfig.has(name));
            const someSelected = !allSelected && categoryMedicineNames.some(name => selectedConfig.has(name));

            return (
              <Card key={title}>
                  <CardHeader className="flex flex-row items-center justify-between">
                      <CardTitle>{title}</CardTitle>
                      <div className="flex items-center space-x-2">
                          <Checkbox
                              id={`select-all-${title}`}
                              checked={allSelected ? true : someSelected ? "indeterminate" : false}
                              onCheckedChange={(checked) => {
                                  handleToggleCategory(categoryMedicines, !!checked);
                              }}
                          />
                          <label
                              htmlFor={`select-all-${title}`}
                              className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                          >
                              Tout sélectionner
                          </label>
                      </div>
                  </CardHeader>
                  <CardContent>
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                          {categoryMedicines.map((med) => (
                          <div
                              key={med.name}
                              className="flex items-start space-x-2 p-2 rounded-md transition-colors hover:bg-muted"
                          >
                              <Checkbox
                              id={med.name}
                              checked={selectedConfig.has(med.name)}
                              onCheckedChange={() => handleToggle(med.name)}
                              className="mt-1"
                              />
                              <div className="grid gap-1.5 leading-none">
                              <label
                                  htmlFor={med.name}
                                  className="text-sm font-medium peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer"
                              >
                                  {med.name}
                              </label>
                              <p className="text-sm text-muted-foreground">{med.unit}</p>
                              </div>
                          </div>
                          ))}
                      </div>
                  </CardContent>
              </Card>
            )
        })}
      </div>
      
      <p className="text-xs text-center text-muted-foreground mt-4">
          Rendez-vous sur la page <span className="font-bold">"Gérer le stock & Prix"</span> pour ajuster les quantités et les dates d'expiration de chaque produit.
      </p>
    </div>
  );
}

const medicineCategoriesConfig: { title: string; medicines: Omit<Medicine, "id" | "stock" | "expiryDate">[] }[] = [
    {
        title: "Comprimés 💊",
        medicines: allMedicinesList.filter(m => m.unit === "Comprimé" || m.unit === "Traitement"),
    },
    {
        title: "Gélules & Capsules Molles",
        medicines: allMedicinesList.filter(m => m.unit === "Gélule" || m.unit === "Capsule"),
    },
    {
        title: "Sachets & Poudres",
        medicines: allMedicinesList.filter(m => m.unit === "Sachet"),
    },
    {
        title: "Liquides / Sirops 🧴",
        medicines: allMedicinesList.filter(m => m.unit === "Flacon" && (m.name.includes("Sirop") || m.name.includes("Solution") || m.name.includes("Suspension"))),
    },
    {
        title: "Crèmes / Pommades / Gels",
        medicines: allMedicinesList.filter(m => m.unit === "Tube"),
    },
    {
        title: "Injectables 💉",
        medicines: allMedicinesList.filter(m => (m.unit === "Flacon" && m.name.includes("injectable")) || m.unit === "Ampoule"),
    },
     {
        title: "Ophtalmologie & ORL 👁👂",
        medicines: allMedicinesList.filter(m => m.name.includes("Collyre") || m.name.includes("Gouttes") || m.name.includes("unidoses")),
    },
    {
        title: "Produits divers de pharmacie",
        medicines: allMedicinesList.filter(m => ["Paquet", "Boîte", "Rouleau", "Unité", "Bandelette"].includes(m.unit)),
    },
];

src/app/adminin/inventory-config/page-data.ts

import type { Medicine } from "@/lib/types";

export const allMedicinesList: Omit<Medicine, "id" | "stock" | "expiryDate">[] = [
    { name: "Paracétamol (Doliprane, Dafalgan) 500 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "para500-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}, {id: "para500-plaq", unitName: "Plaquette", price: 0, itemsPerUnit: 10}] },
    { name: "Paracétamol (Doliprane, Dafalgan) 1 g", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "para1g-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Ibuprofène (Nurofen, Advil) 200 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "ibu200-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Ibuprofène (Nurofen, Advil) 400 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "ibu400-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Aspirine (Acide acétylsalicylique, Aspegic) 500 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "asp500-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Diclofénac (Voltarène) 50 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "diclo50-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Naproxène 250 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "naprox250-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Naproxène 500 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "naprox500-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Kétoprofène 50 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "keto50-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Kétoprofène 100 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "keto100-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Indométacine", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "indo-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Tramadol 50 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "tram50-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Tramadol 100 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "tram100-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Codéine + Paracétamol", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "codolip-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Amoxicilline 500 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "amox500-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Amoxicilline + Acide clavulanique (Augmentin)", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "amoxclav-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Ampicilline 500 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "ampi500-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Ciprofloxacine 500 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "cipro500-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Azithromycine 250 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "azith250-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Azithromycine 500 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "azith500-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Clarithromycine 500 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "clari500-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Érythromycine 250 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "eryth250-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Érythromycine 500 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "eryth500-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Céphalexine 500 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "cephalex500-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Céfuroxime 250 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "cefuro250-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Céfuroxime 500 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "cefuro500-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Céfixime 200 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "cefix200-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Céfixime 400 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "cefix400-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Ceftriaxone (comprimé)", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "ceftri-oral-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Doxycycline 100 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "doxy100-comp-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Chloramphénicol 250 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "chloram250-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Métronidazole 250 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "metro250-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Métronidazole 500 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "metro500-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Hydroxychloroquine 200 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "hydroxychloro-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Sulfadoxine + Pyriméthamine (Fansidar)", unit: "Traitement", purchasePrice: 0, pricing: [{id: "fansidar-trait", unitName: "Traitement", price: 0, itemsPerUnit: 1}] },
    { name: "Artéméther-Luméfantrine (Coartem)", unit: "Traitement", purchasePrice: 0, pricing: [{id: "coartem-trait", unitName: "Traitement Adulte", price: 0, itemsPerUnit: 1}] },
    { name: "Quinine", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "quinine-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Amlodipine 5 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "amlo5-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Amlodipine 10 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "amlo10-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Enalapril 10 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "enal10-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Enalapril 20 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "enal20-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Captopril 25 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "capto25-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Captopril 50 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "capto50-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Losartan 50 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "losar50-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Losartan 100 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "losar100-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Atorvastatine 10 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "atorva10-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Atorvastatine 20 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "atorva20-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Atorvastatine 40 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "atorva40-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Simvastatine 20 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "simva20-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Simvastatine 40 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "simva40-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Furosemide 40 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "furo40-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Hydrochlorothiazide 25 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "hctz25-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Spironolactone 25 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "spiro25-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Spironolactone 50 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "spiro50-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Metformine 500 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "metfo500-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Metformine 850 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "metfo850-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Metformine 1 g", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "metfo1g-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Glibenclamide 5 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "gliben5-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Gliclazide 30 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "glicla30-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Gliclazide 60 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "glicla60-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Salbutamol 2 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "salbu2-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Salbutamol 4 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "salbu4-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Montélukast 4 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "montel4-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Montélukast 10 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "montel10-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Loratadine 10 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "lora10-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Cétirizine 10 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "cetiriz-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Fexofénadine 120 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "fexo120-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Fexofénadine 180 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "fexo180-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}] },
    { name: "Vitamine C 500 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "vitc500-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Vitamine C 1 g", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "vitc1g-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Zinc 20 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "zinc20-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Fer (Sulfate ferreux) 200 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "fer200-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Calcium carbonate 500 mg", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "calcium500-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Multivitamines", unit: "Comprimé", purchasePrice: 0, pricing: [{id: "multivit-unit", unitName: "Comprimé", price: 0, itemsPerUnit: 1}]},
    { name: "Oméprazole 20 mg", unit: "Gélule", purchasePrice: 0, pricing: [{id: "omep20-gel", unitName: "Gélule", price: 0, itemsPerUnit: 1}] },
    { name: "Pantoprazole 40 mg", unit: "Gélule", purchasePrice: 0, pricing: [{id: "panto40-gel", unitName: "Gélule", price: 0, itemsPerUnit: 1}]},
    { name: "Esoméprazole 20 mg", unit: "Gélule", purchasePrice: 0, pricing: [{id: "esomep20-gel", unitName: "Gélule", price: 0, itemsPerUnit: 1}]},
    { name: "Esoméprazole 40 mg", unit: "Gélule", purchasePrice: 0, pricing: [{id: "esomep40-gel", unitName: "Gélule", price: 0, itemsPerUnit: 1}]},
    { name: "Doxycycline 100 mg (gélule)", unit: "Gélule", purchasePrice: 0, pricing: [{id: "doxy100-gel", unitName: "Gélule", price: 0, itemsPerUnit: 1}] },
    { name: "Amoxicilline 500 mg (gélule)", unit: "Gélule", purchasePrice: 0, pricing: [{id: "amox500-gel", unitName: "Gélule", price: 0, itemsPerUnit: 1}] },
    { name: "Fluconazole 150 mg", unit: "Gélule", purchasePrice: 0, pricing: [{id: "fluco150-gel", unitName: "Gélule", price: 0, itemsPerUnit: 1}] },
    { name: "Fluconazole 200 mg", unit: "Gélule", purchasePrice: 0, pricing: [{id: "fluco200-gel", unitName: "Gélule", price: 0, itemsPerUnit: 1}] },
    { name: "Itraconazole 100 mg", unit: "Gélule", purchasePrice: 0, pricing: [{id: "itra100-gel", unitName: "Gélule", price: 0, itemsPerUnit: 1}] },
    { name: "Compléments multivitaminés (Vitamine A, D, E)", unit: "Gélule", purchasePrice: 0, pricing: [{id: "multivit-gel", unitName: "Gélule", price: 0, itemsPerUnit: 1}] },
    { name: "Vitamine E 400 UI", unit: "Capsule", purchasePrice: 0, pricing: [{id: "vite400-cap", unitName: "Capsule", price: 0, itemsPerUnit: 1}]},
    { name: "Huile de foie de morue", unit: "Capsule", purchasePrice: 0, pricing: [{id: "codliver-cap", unitName: "Capsule", price: 0, itemsPerUnit: 1}]},
    { name: "Omega-3", unit: "Capsule", purchasePrice: 0, pricing: [{id: "omega3-cap", unitName: "Capsule", price: 0, itemsPerUnit: 1}]},
    { name: "Vitamine D3 1000 UI", unit: "Capsule", purchasePrice: 0, pricing: [{id: "vitd1000-cap", unitName: "Capsule", price: 0, itemsPerUnit: 1}]},
    { name: "Vitamine D3 2000 UI", unit: "Capsule", purchasePrice: 0, pricing: [{id: "vitd2000-cap", unitName: "Capsule", price: 0, itemsPerUnit: 1}]},
    { name: "Sels de réhydratation orale (SRO)", unit: "Sachet", purchasePrice: 0, pricing: [{id: "sro-sachet", unitName: "Sachet", price: 0, itemsPerUnit: 1}] },
    { name: "Vitamine C poudre effervescente", unit: "Sachet", purchasePrice: 0, pricing: [{id: "vitc-sachet", unitName: "Sachet", price: 0, itemsPerUnit: 1}] },
    { name: "Glucose oral", unit: "Sachet", purchasePrice: 0, pricing: [{id: "glucose-sachet", unitName: "Sachet", price: 0, itemsPerUnit: 1}] },
    { name: "Amoxicilline poudre pour suspension", unit: "Flacon", purchasePrice: 0, pricing: [{id: "amox-susp-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}]},
    { name: "Azithromycine poudre pour suspension", unit: "Flacon", purchasePrice: 0, pricing: [{id: "azith-susp-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}]},
    { name: "Coartem pédiatrique poudre", unit: "Flacon", purchasePrice: 0, pricing: [{id: "coartem-peds-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}]},
    { name: "Sirop Paracétamol (120 mg/5 ml)", unit: "Flacon", purchasePrice: 0, pricing: [{id: "parasirop-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}] },
    { name: "Sirop Ibuprofène (100 mg/5 ml)", unit: "Flacon", purchasePrice: 0, pricing: [{id: "ibusirop-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}] },
    { name: "Sirop Amoxicilline", unit: "Flacon", purchasePrice: 0, pricing: [{id: "amoxsirop-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}] },
    { name: "Sirop Azithromycine", unit: "Flacon", purchasePrice: 0, pricing: [{id: "azithsirop-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}] },
    { name: "Sirop Érythromycine", unit: "Flacon", purchasePrice: 0, pricing: [{id: "erythsirop-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}] },
    { name: "Sirop Loratadine", unit: "Flacon", purchasePrice: 0, pricing: [{id: "lorasirop-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}] },
    { name: "Sirop Cétirizine", unit: "Flacon", purchasePrice: 0, pricing: [{id: "cetirizsirop-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}]},
    { name: "Sirop Dextrométhorphane (toux sèche)", unit: "Flacon", purchasePrice: 0, pricing: [{id: "dextrosirop-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}] },
    { name: "Sirop Guaifénésine (expectorant)", unit: "Flacon", purchasePrice: 0, pricing: [{id: "guaisirop-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}] },
    { name: "Suspension Fluconazole", unit: "Flacon", purchasePrice: 0, pricing: [{id: "flucosirop-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}] },
    { name: "Solution Bétadine", unit: "Flacon", purchasePrice: 0, pricing: [{id: "betadine-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}]},
    { name: "Solution Chlorhexidine", unit: "Flacon", purchasePrice: 0, pricing: [{id: "chlorhex-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}]},
    { name: "Sérum physiologique", unit: "Flacon", purchasePrice: 0, pricing: [{id: "serumphy-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}] },
    { name: "Pommade Mupirocine (antibiotique)", unit: "Tube", purchasePrice: 0, pricing: [{id: "mupiro-tube", unitName: "Tube", price: 0, itemsPerUnit: 1}] },
    { name: "Crème Clotrimazole (antifongique)", unit: "Tube", purchasePrice: 0, pricing: [{id: "clotri-tube", unitName: "Tube", price: 0, itemsPerUnit: 1}] },
    { name: "Crème Miconazole", unit: "Tube", purchasePrice: 0, pricing: [{id: "mico-tube", unitName: "Tube", price: 0, itemsPerUnit: 1}]},
    { name: "Crème Kétoconazole", unit: "Tube", purchasePrice: 0, pricing: [{id: "keto-cream-tube", unitName: "Tube", price: 0, itemsPerUnit: 1}] },
    { name: "Crème Hydrocortisone", unit: "Tube", purchasePrice: 0, pricing: [{id: "hydrocort-tube", unitName: "Tube", price: 0, itemsPerUnit: 1}]},
    { name: "Crème Bétaméthasone", unit: "Tube", purchasePrice: 0, pricing: [{id: "betam-tube", unitName: "Tube", price: 0, itemsPerUnit: 1}] },
    { name: "Gel Diclofénac", unit: "Tube", purchasePrice: 0, pricing: [{id: "diclogel-tube", unitName: "Tube", price: 0, itemsPerUnit: 1}] },
    { name: "Crème Perméthrine (anti-gale, anti-poux)", unit: "Tube", purchasePrice: 0, pricing: [{id: "permet-tube", unitName: "Tube", price: 0, itemsPerUnit: 1}] },
    { name: "Pommade à base de zinc (érythème fessier)", unit: "Tube", purchasePrice: 0, pricing: [{id: "zinc-pommade", unitName: "Tube", price: 0, itemsPerUnit: 1}]},
    { name: "Ceftriaxone injectable", unit: "Flacon", purchasePrice: 0, pricing: [{id: "ceftria-inj-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}] },
    { name: "Cefotaxime injectable", unit: "Flacon", purchasePrice: 0, pricing: [{id: "cefotax-inj-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}] },
    { name: "Gentamicine injectable", unit: "Ampoule", purchasePrice: 0, pricing: [{id: "genta-inj-amp", unitName: "Ampoule", price: 0, itemsPerUnit: 1}] },
    { name: "Amikacine injectable", unit: "Flacon", purchasePrice: 0, pricing: [{id: "amika-inj-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}] },
    { name: "Quinine injectable", unit: "Ampoule", purchasePrice: 0, pricing: [{id: "quinine-inj-amp", unitName: "Ampoule", price: 0, itemsPerUnit: 1}] },
    { name: "Artesunate injectable", unit: "Flacon", purchasePrice: 0, pricing: [{id: "artesunate-inj-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}] },
    { name: "Diclofénac injectable", unit: "Ampoule", purchasePrice: 0, pricing: [{id: "diclo-inj-amp", unitName: "Ampoule", price: 0, itemsPerUnit: 1}]},
    { name: "Hydrocortisone injectable", unit: "Flacon", purchasePrice: 0, pricing: [{id: "hydrocort-inj-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}] },
    { name: "Insuline rapide (Actrapid)", unit: "Flacon", purchasePrice: 0, pricing: [{id: "actrapid-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}]},
    { name: "Insuline lente (Lantus)", unit: "Flacon", purchasePrice: 0, pricing: [{id: "lantus-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}] },
    { name: "Vitamine B complexe injectable", unit: "Ampoule", purchasePrice: 0, pricing: [{id: "vitb-inj-amp", unitName: "Ampoule", price: 0, itemsPerUnit: 1}] },
    { name: "Collyre Chloramphénicol", unit: "Flacon", purchasePrice: 0, pricing: [{id: "chloram-collyre", unitName: "Flacon", price: 0, itemsPerUnit: 1}]},
    { name: "Collyre Tobramycine", unit: "Flacon", purchasePrice: 0, pricing: [{id: "tobra-collyre", unitName: "Flacon", price: 0, itemsPerUnit: 1}]},
    { name: "Collyre lubrifiant (larmes artificielles)", unit: "Flacon", purchasePrice: 0, pricing: [{id: "larmes-art-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}]},
    { name: "Gouttes auriculaires antibiotiques", unit: "Flacon", purchasePrice: 0, pricing: [{id: "gouttes-ab-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}] },
    { name: "Gouttes auriculaires antifongiques", unit: "Flacon", purchasePrice: 0, pricing: [{id: "gouttes-af-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}] },
    { name: "Sérum physiologique en unidoses", unit: "Boîte", purchasePrice: 0, pricing: [{id: "serum-unidose-boite", unitName: "Boîte", price: 0, itemsPerUnit: 1}] },
    { name: "Compresses stériles", unit: "Paquet", purchasePrice: 0, pricing: [{id: "compresses-paq", unitName: "Paquet", price: 0, itemsPerUnit: 1}] },
    { name: "Pansements adhésifs", unit: "Boîte", purchasePrice: 0, pricing: [{id: "pansements-boite", unitName: "Boîte", price: 0, itemsPerUnit: 1}] },
    { name: "Bandes de gaze", unit: "Rouleau", purchasePrice: 0, pricing: [{id: "bande-gaze-rouleau", unitName: "Rouleau", price: 0, itemsPerUnit: 1}]},
    { name: "Seringues et aiguilles", unit: "Unité", purchasePrice: 0, pricing: [{id: "seringue-unit", unitName: "Unité", price: 0, itemsPerUnit: 1}]},
    { name: "Thermomètres", unit: "Unité", purchasePrice: 0, pricing: [{id: "thermo-unit", unitName: "Unité", price: 0, itemsPerUnit: 1}] },
    { name: "Gants médicaux", unit: "Boîte", purchasePrice: 0, pricing: [{id: "gants-boite", unitName: "Boîte", price: 0, itemsPerUnit: 1}]},
    { name: "Solutions hydroalcooliques", unit: "Flacon", purchasePrice: 0, pricing: [{id: "sol-hydro-flacon", unitName: "Flacon", price: 0, itemsPerUnit: 1}]},
    { name: "Tests de grossesse", unit: "Unité", purchasePrice: 0, pricing: [{id: "testg-unit", unitName: "Unité", price: 0, itemsPerUnit: 1}] },
    { name: "Tests de glycémie", unit: "Bandelette", purchasePrice: 0, pricing: [{id: "testgly-bande", unitName: "Bandelette", price: 0, itemsPerUnit: 1}]},
];

src/app/adminin/dashboard/page.tsx

"use client";

import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import useStore from "@/hooks/use-store";
import { DollarSign, Package, TrendingDown, TrendingUp, Activity, Warehouse } from "lucide-react";
import { format, subDays } from "date-fns";
import { fr } from 'date-fns/locale';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, Legend } from 'recharts';
import { ChartContainer, ChartTooltip, ChartTooltipContent, ChartConfig } from "@/components/ui/chart";

export default function DashboardPage() {
  const { sales, medicines } = useStore();

  const totalRevenue = sales.reduce((acc, sale) => acc + sale.total, 0);
  const totalSales = sales.length;
  const lowStockItems = medicines.filter(
    (med) => med.stock > 0 && med.stock <= 10
  ).length;
  const outOfStockItems = medicines.filter((med) => med.stock === 0).length;

  const last7DaysSales = sales.filter(s => new Date(s.date) >= subDays(new Date(), 7));
  const salesByDay = last7DaysSales.reduce((acc, sale) => {
      const day = format(new Date(sale.date), 'eeee', { locale: fr });
      acc[day] = (acc[day] || 0) + sale.total;
      return acc;
  }, {} as Record<string, number>);

  const chartData = Object.keys(salesByDay).map(day => ({
    name: day.substring(0, 3),
    total: salesByDay[day]
  })).reverse();

  const stockStatusData = [
      { name: 'En Stock', value: medicines.filter(m => m.stock > 10).length, fill: 'var(--color-inStock)' },
      { name: 'Stock Faible', value: lowStockItems, fill: 'var(--color-lowStock)' },
      { name: 'En Rupture', value: outOfStockItems, fill: 'var(--color-outOfStock)' },
  ];

  const chartConfig = {
    total: {
      label: "Revenu",
      color: "hsl(var(--chart-1))",
    },
    inStock: {
      label: "En Stock",
      color: "hsl(var(--chart-2))",
    },
    lowStock: {
      label: "Stock Faible",
      color: "hsl(var(--chart-4))",
    },
    outOfStock: {
      label: "En Rupture",
      color: "hsl(var(--chart-5))",
    },
  } satisfies ChartConfig

  return (
    <div className="flex flex-col gap-6">
      <header>
        <h1 className="text-3xl font-bold font-headline">Tableau de bord administrateur</h1>
        <p className="text-muted-foreground">
          Aperçu en temps réel des activités de votre pharmacie.
        </p>
      </header>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Revenu Total</CardTitle>
            <DollarSign className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {totalRevenue.toFixed(0)} CDF
            </div>
            <p className="text-xs text-muted-foreground">
              Basé sur {totalSales} ventes
            </p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Ventes</CardTitle>
            <TrendingUp className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">+{totalSales}</div>
            <p className="text-xs text-muted-foreground">
              Total des transactions
            </p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Stock Faible</CardTitle>
            <TrendingDown className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{lowStockItems}</div>
            <p className="text-xs text-muted-foreground">
              Articles avec 10 unités ou moins
            </p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">En Rupture de Stock</CardTitle>
            <Package className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{outOfStockItems}</div>
            <p className="text-xs text-muted-foreground">Articles non disponibles</p>
          </CardContent>
        </Card>
      </div>

      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-7">
        <Card className="lg:col-span-4">
          <CardHeader>
            <CardTitle>Revenus des 7 derniers jours</CardTitle>
          </CardHeader>
          <CardContent className="pl-2">
             <ChartContainer config={chartConfig} className="min-h-[200px] w-full">
                <BarChart accessibilityLayer data={chartData}>
                    <CartesianGrid vertical={false} />
                    <XAxis
                    dataKey="name"
                    tickLine={false}
                    tickMargin={10}
                    axisLine={false}
                    />
                    <YAxis tickLine={false} axisLine={false} tickFormatter={(value) => `${value} CDF`} />
                    <ChartTooltip content={<ChartTooltipContent />} />
                    <Bar dataKey="total" fill="var(--color-total)" radius={4} />
                </BarChart>
            </ChartContainer>
          </CardContent>
        </Card>
        <Card className="lg:col-span-3">
             <CardHeader>
                <CardTitle>Aperçu de l'inventaire</CardTitle>
                <CardDescription>Répartition des articles par statut.</CardDescription>
            </CardHeader>
            <CardContent className="flex justify-center">
                 <ChartContainer
                    config={chartConfig}
                    className="mx-auto aspect-square min-h-[250px]"
                >
                    <PieChart>
                    <ChartTooltip content={<ChartTooltipContent nameKey="name" />} />
                    <Pie data={stockStatusData} dataKey="value" nameKey="name">
                        {stockStatusData.map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={entry.fill} />
                        ))}
                    </Pie>
                    <Legend />
                    </PieChart>
                </ChartContainer>
            </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
        <CardTitle>Ventes Récentes</CardTitle>
        </CardHeader>
        <CardContent>
        <Table>
            <TableHeader>
            <TableRow>
                <TableHead>ID Vente</TableHead>
                <TableHead>Date</TableHead>
                <TableHead>Articles</TableHead>
                <TableHead className="text-right">Montant</TableHead>
            </TableRow>
            </TableHeader>
            <TableBody>
            {sales.length > 0 ? (
                sales.slice(0, 10).map((sale) => (
                <TableRow key={sale.id}>
                    <TableCell className="font-medium">
                    {sale.id.slice(-6)}
                    </TableCell>
                    <TableCell>
                    {format(new Date(sale.date), "PPP p", { locale: fr })}
                    </TableCell>
                    <TableCell>{sale.items.length}</TableCell>
                    <TableCell className="text-right">
                    {sale.total.toFixed(0)} CDF
                    </TableCell>
                </TableRow>
                ))
            ) : (
                <TableRow>
                <TableCell colSpan={4} className="text-center h-24">
                    Aucune vente pour le moment.
                </TableCell>
                </TableRow>
            )}
            </TableBody>
        </Table>
        </CardContent>
    </Card>
    </div>
  );
}

src/app/adminin/ai-ordering/page.tsx

"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { useForm, SubmitHandler } from "react-hook-form";
import useStore from "@/hooks/use-store";
import { runSuggestOrderAmounts } from "./actions";
import { Loader2, Sparkles, Bot } from "lucide-react";

type Inputs = {
  salesData: string;
  currentStockLevels: string;
  orderingConstraints: string;
};

type Suggestion = {
  suggestedOrders: string;
  rationale: string;
};

export default function AiOrderingPage() {
  const { medicines, sales } = useStore();
  const { register, handleSubmit, setValue } = useForm<Inputs>();
  const [isLoading, setIsLoading] = useState(false);
  const [suggestion, setSuggestion] = useState<Suggestion | null>(null);
  const [error, setError] = useState<string | null>(null);

  const prefillData = () => {
    const salesSummary = sales.slice(0, 20).map(s => 
      `Vente du ${new Date(s.date).toLocaleDateString()}: ${s.items.map(i => `${i.quantity}x ${i.name}`).join(', ')} - Total: ${s.total.toFixed(0)} CDF`
    ).join('\n');

    const stockSummary = medicines.map(m => `${m.name}: ${m.stock} unités`).join('\n');

    setValue("salesData", salesSummary || "Aucune donnée de vente récente disponible.");
    setValue("currentStockLevels", stockSummary || "Aucune donnée de stock disponible.");
    setValue("orderingConstraints", "Limite budgétaire : 10000000 CDF. Capacité de stockage : 2000 unités au total. Délai de livraison du fournisseur : 3-5 jours. Éviter le surstockage d'articles expirant dans les 6 mois.");
  };

  const onSubmit: SubmitHandler<Inputs> = async (data) => {
    setIsLoading(true);
    setSuggestion(null);
    setError(null);
    try {
      const result = await runSuggestOrderAmounts(data);
      setSuggestion(result);
    } catch (err) {
      setError("Échec de l'obtention des suggestions. Veuillez réessayer.");
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col gap-6">
      <header>
        <h1 className="text-3xl font-bold font-headline flex items-center gap-2">
          <Bot /> Commande assistée par IA
        </h1>
        <p className="text-muted-foreground">
          Obtenez des suggestions intelligentes pour votre prochaine commande de fournitures basées sur les tendances de vente.
        </p>
      </header>
      <div className="grid md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Fournir les données</CardTitle>
            <Button variant="outline" size="sm" onClick={prefillData} className="ml-auto -mt-8">
              Pré-remplir avec les données actuelles
            </Button>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
              <div>
                <label className="text-sm font-medium">Données de vente</label>
                <Textarea {...register("salesData")} rows={5} placeholder="ex: Ventes des 30 derniers jours : 50x Paracétamol, 20x Amoxicilline..." />
              </div>
              <div>
                <label className="text-sm font-medium">Niveaux de stock actuels</label>
                <Textarea {...register("currentStockLevels")} rows={5} placeholder="ex: Paracétamol : 150 unités, Amoxicilline : 80 unités..." />
              </div>
              <div>
                <label className="text-sm font-medium">Contraintes de commande</label>
                <Textarea {...register("orderingConstraints")} rows={3} placeholder="ex: Limite budgétaire : 10000000 CDF, capacité de stockage..." />
              </div>
              <Button type="submit" disabled={isLoading} className="w-full">
                {isLoading ? (
                  <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Génération en cours...</>
                ) : (
                  <><Sparkles className="mr-2 h-4 w-4" /> Obtenir des suggestions</>
                )}
              </Button>
            </form>
          </CardContent>
        </Card>
        
        <div className="flex flex-col gap-6">
          <Card className="flex-1">
            <CardHeader>
              <CardTitle>Commandes suggérées</CardTitle>
            </CardHeader>
            <CardContent>
              {isLoading && <p className="text-muted-foreground">Analyse des données...</p>}
              {error && <p className="text-destructive">{error}</p>}
              {suggestion ? (
                <pre className="whitespace-pre-wrap font-sans text-sm">{suggestion.suggestedOrders}</pre>
              ) : !isLoading && <p className="text-muted-foreground">Les suggestions apparaîtront ici.</p>}
            </CardContent>
          </Card>
          <Card className="flex-1">
            <CardHeader>
              <CardTitle>Justification</CardTitle>
            </CardHeader>
            <CardContent>
              {isLoading && <p className="text-muted-foreground">Génération de la justification...</p>}
              {error && <p className="text-destructive">Impossible de générer la justification.</p>}
              {suggestion ? (
                <p className="text-sm text-muted-foreground">{suggestion.rationale}</p>
              ) : !isLoading && <p className="text-muted-foreground">L'explication apparaîtra ici.</p>}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}

src/app/adminin/ai-ordering/actions.ts

"use server";

import { suggestOrderAmounts, type SuggestOrderAmountsInput, type SuggestOrderAmountsOutput } from "@/ai/flows/suggest-order-amounts";

export async function runSuggestOrderAmounts(input: SuggestOrderAmountsInput): Promise<SuggestOrderAmountsOutput> {
  try {
    const output = await suggestOrderAmounts(input);
    return output;
  } catch (error) {
    console.error("Error running suggestOrderAmounts flow:", error);
    throw new Error("Failed to get suggestions from the AI model.");
  }
}

src/app/ai/gentkit.ts

import {genkit} from 'genkit';
import {googleAI} from '@genkit-ai/googleai';

export const ai = genkit({
  plugins: [googleAI()],
  model: 'googleai/gemini-2.0-flash',
});

src/app/ai/flows/suggest-order-amounts.ts

'use server';

/**
 * @fileOverview This file defines a Genkit flow for suggesting optimal order amounts for pharmaceutical products based on sales trends.
 *
 * - suggestOrderAmounts - A function that initiates the order suggestion process.
 * - SuggestOrderAmountsInput - The input type for the suggestOrderAmounts function.
 * - SuggestOrderAmountsOutput - The return type for the suggestOrderAmounts function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestOrderAmountsInputSchema = z.object({
  salesData: z.string().describe('Historical sales data for pharmaceutical products, including product names, quantities sold, and dates. Represented as a string.'),
  currentStockLevels: z.string().describe('Current stock levels for each product, including product names and quantities. Represented as a string.'),
  orderingConstraints: z.string().describe('Constraints on ordering, such as budget limits, storage capacity, or supplier lead times. Represented as a string.'),
});
export type SuggestOrderAmountsInput = z.infer<typeof SuggestOrderAmountsInputSchema>;

const SuggestOrderAmountsOutputSchema = z.object({
  suggestedOrders: z.string().describe('A list of suggested order amounts for each product, including product names and quantities to order. Represented as a string.'),
  rationale: z.string().describe('Explanation of the reasoning behind the suggested order amounts, considering sales trends, current stock levels, and ordering constraints.'),
});
export type SuggestOrderAmountsOutput = z.infer<typeof SuggestOrderAmountsOutputSchema>;

export async function suggestOrderAmounts(input: SuggestOrderAmountsInput): Promise<SuggestOrderAmountsOutput> {
  return suggestOrderAmountsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestOrderAmountsPrompt',
  input: {schema: SuggestOrderAmountsInputSchema},
  output: {schema: SuggestOrderAmountsOutputSchema},
  prompt: `You are an AI assistant that analyzes sales trends and suggests optimal ordering amounts for pharmaceutical products.

  Consider the following sales data, current stock levels, and ordering constraints to generate a list of suggested order amounts and a rationale for your suggestions.

  Sales Data: {{{salesData}}}
  Current Stock Levels: {{{currentStockLevels}}}
  Ordering Constraints: {{{orderingConstraints}}}

  Based on this information, provide a list of suggested order amounts for each product and a rationale for your suggestions.
  Ensure that the suggested orders will not cause medicine spoilage due to overstocking.
  Output the suggested orders as a simple list of product names and the number of units to order.
`,
});

const suggestOrderAmountsFlow = ai.defineFlow(
  {
    name: 'suggestOrderAmountsFlow',
    inputSchema: SuggestOrderAmountsInputSchema,
    outputSchema: SuggestOrderAmountsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);

src/app/ai/ strategic-analysis.ts

'use server';

/**
 * @fileOverview This file defines a Genkit flow for providing strategic analysis for pharmacy administrators.
 *
 * - runStrategicAnalysis - A function that initiates the strategic analysis process.
 * - StrategicAnalysisInput - The input type for the runStrategicAnalysis function.
 * - StrategicAnalysisOutput - The return type for the runStrategicAnalysis function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const StrategicAnalysisInputSchema = z.object({
  salesData: z.string().describe('Historical sales data for pharmaceutical products, including product names, quantities sold, dates, and total revenue. Represented as a string.'),
  inventoryData: z.string().describe('Current inventory data, including product names, stock levels, and expiry dates. Represented as a string.'),
});
export type StrategicAnalysisInput = z.infer<typeof StrategicAnalysisInputSchema>;

const StrategicAnalysisOutputSchema = z.object({
    topPerformingProducts: z.string().describe("A summary of the best-selling or most profitable products."),
    underperformingProducts: z.string().describe("A summary of products with low sales or nearing expiration."),
    strategicRecommendations: z.string().describe("Actionable recommendations for the administrator, such as promotions for specific products, suggestions for destocking, or pricing adjustments."),
});
export type StrategicAnalysisOutput = z.infer<typeof StrategicAnalysisOutputSchema>;

export async function runStrategicAnalysis(input: StrategicAnalysisInput): Promise<StrategicAnalysisOutput> {
  return strategicAnalysisFlow(input);
}

const prompt = ai.definePrompt({
  name: 'strategicAnalysisPrompt',
  input: {schema: StrategicAnalysisInputSchema},
  output: {schema: StrategicAnalysisOutputSchema},
  prompt: `You are a strategic advisor AI for a pharmacy administrator. Your role is to analyze sales and inventory data to provide actionable insights.

  Analyze the following data:
  Sales Data: {{{salesData}}}
  Inventory Data: {{{inventoryData}}}

  Based on your analysis, provide the following:
  1.  **Top-Performing Products:** Identify the products that are selling the best or are the most profitable. Briefly explain why.
  2.  **Underperforming Products:** Identify products that are not selling well or are close to their expiration date.
  3.  **Strategic Recommendations:** Provide clear, actionable recommendations. For example, suggest promotions for underperforming items, advise on destocking items nearing expiration to cut losses, or recommend focusing on high-performing products.

  Your tone should be professional, concise, and helpful, as you are addressing a business administrator.
`,
});

const strategicAnalysisFlow = ai.defineFlow(
  {
    name: 'strategicAnalysisFlow',
    inputSchema: StrategicAnalysisInputSchema,
    outputSchema: StrategicAnalysisOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);

src/ai/dev.ts

import { config } from 'dotenv';
config();

import '@/ai/flows/suggest-order-amounts.ts';
import '@/ai/flows/strategic-analysis.ts';

package.json

{
  "name": "nextn",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack -p 9002",
    "genkit:dev": "genkit start -- tsx src/ai/dev.ts",
    "genkit:watch": "genkit start -- tsx --watch src/ai/dev.ts",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "@genkit-ai/googleai": "^1.14.1",
    "@genkit-ai/next": "^1.14.1",
    "@hookform/resolvers": "^4.1.3",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-menubar": "^1.1.6",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slider": "^1.2.3",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-toast": "^1.2.6",
    "@radix-ui/react-tooltip": "^1.1.8",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^3.6.0",
    "dotenv": "^16.5.0",
    "embla-carousel-react": "^8.6.0",
    "firebase": "^11.9.1",
    "genkit": "^1.14.1",
    "lucide-react": "^0.475.0",
    "next": "15.3.3",
    "patch-package": "^8.0.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.54.2",
    "recharts": "^2.15.1",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "genkit-cli": "^1.14.1",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

next.conf.ts

import type {NextConfig} from 'next';

const nextConfig: NextConfig = {
  /* config options here */
  typescript: {
    ignoreBuildErrors: true,
  },
  eslint: {
    ignoreDuringBuilds: true,
  },
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'placehold.co',
        port: '',
        pathname: '/**',
      },
    ],
  },
};

export default nextConfig;

components.json

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

apphosting.yami

# Settings to manage and configure a Firebase App Hosting backend.
# https://firebase.google.com/docs/app-hosting/configure

runConfig:
  # Increase this value if you'd like to automatically spin up
  # more instances in response to increased traffic.
  maxInstances: 1

see less